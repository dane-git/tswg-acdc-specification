{
    "blocks": {
        "0": {
            "type": "json",
            "content": "{\n  \"v\":  \"ACDC10JSON00011c_\",\n  \"d\":  \"EBdXt3gIXOf2BBWNHdSXCJnFJL5OuQPyM5K0neuniccM\",\n  \"i\":  \"EFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPMmkPreYpZf\",\n  \"rd\": \"EMwsxUelUauaXtMxTfPAMPAI6FkekwlOjkggtymRy7x\",\n  \"s\":  \"E46jrVPTzlSkUPqGGeIZ8a8FWS7a6s4reAXRZOkogZ2A\",\n  \"a\":  \"EgveY4-9XgOcLxUderzwLIr9Bf7V_NHwY1lkFrn9y2PY\",\n  \"e\":  \"ERH3dCdoFOLe71iheqcywJcnjtJtQIYPvAu6DZIl3MOA\",\n  \"r\":  \"Ee71iheqcywJcnjtJtQIYPvAu6DZIl3MORH3dCdoFOLB\"\n}",
            "data": {
                "v": "ACDC10JSON00011c_",
                "d": "EBdXt3gIXOf2BBWNHdSXCJnFJL5OuQPyM5K0neuniccM",
                "i": "EFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPMmkPreYpZf",
                "rd": "EMwsxUelUauaXtMxTfPAMPAI6FkekwlOjkggtymRy7x",
                "s": "E46jrVPTzlSkUPqGGeIZ8a8FWS7a6s4reAXRZOkogZ2A",
                "a": "EgveY4-9XgOcLxUderzwLIr9Bf7V_NHwY1lkFrn9y2PY",
                "e": "ERH3dCdoFOLe71iheqcywJcnjtJtQIYPvAu6DZIl3MOA",
                "r": "Ee71iheqcywJcnjtJtQIYPvAu6DZIl3MORH3dCdoFOLB"
            },
            "basic_said": "EDB4fwZQq2C9Gbe1BiNNE539R2a1u9UlIxqovuvrH14g",
            "compact_said": "EDB4fwZQq2C9Gbe1BiNNE539R2a1u9UlIxqovuvrH14g"
        },
        "1": {
            "type": "json",
            "content": "{\n  \"$id\": \"EBdXt3gIXOf2BBWNHdSXCJnFJL5OuQPyM5K0neuniccM\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"title\": \"Compact Public ACDC\",\n  \"description\": \"Example JSON Schema for a Compact private ACDC.\",\n  \"credentialType\": \"CompactPublicACDCExample\",\n  \"version\": \"1.0.0\",\n  \"type\": \"object\",\n  \"required\":\n  [\n    \"v\",\n    \"d\",\n    \"i\",\n    \"rd\",\n    \"s\",\n    \"a\",\n    \"e\",\n    \"r\"\n  ],\n  \"properties\":\n  {\n    \"v\":\n    {\n      \"description\": \"ACDC version string\",\n      \"type\": \"string\"\n    },\n    \"d\":\n    {\n     \"description\": \"ACDC SAID\",\n      \"type\": \"string\"\n    },\n    \"i\":\n    {\n      \"description\": \"Issuer AID\",\n      \"type\": \"string\"\n    },\n    \"rd\":\n    {\n      \"description\": \"Registry SAID\",\n      \"type\": \"string\"\n    },\n    \"s\": \n    {\n      \"description\": \"schema SAID\",\n      \"type\": \"string\"\n    },\n    \"a\": \n    {\n      \"description\": \"attribute SAID\",\n      \"type\": \"string\"\n    },\n    \"e\": \n    {\n      \"description\": \"edge SAID\",\n      \"type\": \"string\"\n    },\n    \"r\": \n    {\n      \"description\": \"rule SAID\",\n      \"type\": \"string\"\n    }\n  },\n  \"additionalProperties\": false\n}",
            "data": {
                "$id": "EBdXt3gIXOf2BBWNHdSXCJnFJL5OuQPyM5K0neuniccM",
                "$schema": "https://json-schema.org/draft/2020-12/schema",
                "title": "Compact Public ACDC",
                "description": "Example JSON Schema for a Compact private ACDC.",
                "credentialType": "CompactPublicACDCExample",
                "version": "1.0.0",
                "type": "object",
                "required": [
                    "v",
                    "d",
                    "i",
                    "rd",
                    "s",
                    "a",
                    "e",
                    "r"
                ],
                "properties": {
                    "v": {
                        "description": "ACDC version string",
                        "type": "string"
                    },
                    "d": {
                        "description": "ACDC SAID",
                        "type": "string"
                    },
                    "i": {
                        "description": "Issuer AID",
                        "type": "string"
                    },
                    "rd": {
                        "description": "Registry SAID",
                        "type": "string"
                    },
                    "s": {
                        "description": "schema SAID",
                        "type": "string"
                    },
                    "a": {
                        "description": "attribute SAID",
                        "type": "string"
                    },
                    "e": {
                        "description": "edge SAID",
                        "type": "string"
                    },
                    "r": {
                        "description": "rule SAID",
                        "type": "string"
                    }
                },
                "additionalProperties": false
            },
            "basic_said": "EOvloHnAYwhza9HkB7TnK4r_C-VRnIQ8BrvaXD-e9a2y",
            "compact_said": "EOvloHnAYwhza9HkB7TnK4r_C-VRnIQ8BrvaXD-e9a2y",
            "full": {
                "$id": "EOvloHnAYwhza9HkB7TnK4r_C-VRnIQ8BrvaXD-e9a2y",
                "$schema": "https://json-schema.org/draft/2020-12/schema",
                "title": "Compact Public ACDC",
                "description": "Example JSON Schema for a Compact private ACDC.",
                "credentialType": "CompactPublicACDCExample",
                "version": "1.0.0",
                "type": "object",
                "required": [
                    "v",
                    "d",
                    "i",
                    "rd",
                    "s",
                    "a",
                    "e",
                    "r"
                ],
                "properties": {
                    "v": {
                        "description": "ACDC version string",
                        "type": "string"
                    },
                    "d": {
                        "description": "ACDC SAID",
                        "type": "string"
                    },
                    "i": {
                        "description": "Issuer AID",
                        "type": "string"
                    },
                    "rd": {
                        "description": "Registry SAID",
                        "type": "string"
                    },
                    "s": {
                        "description": "schema SAID",
                        "type": "string"
                    },
                    "a": {
                        "description": "attribute SAID",
                        "type": "string"
                    },
                    "e": {
                        "description": "edge SAID",
                        "type": "string"
                    },
                    "r": {
                        "description": "rule SAID",
                        "type": "string"
                    }
                },
                "additionalProperties": false
            }
        },
        "2": {
            "type": "json",
            "content": "{\n  \"v\":  \"ACDC10JSON00011c_\",\n  \"d\":  \"EBdXt3gIXOf2BBWNHdSXCJnFJL5OuQPyM5K0neuniccM\",\n  \"u\":  \"0ANghkDaG7OY1wjaDAE0qHcg\",\n  \"i\":  \"did:keri:EmkPreYpZfFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPM\",\n  \"rd\": \"EMwsxUelUauaXtMxTfPAMPAI6FkekwlOjkggtymRy7x\",\n  \"s\":  \"E46jrVPTzlSkUPqGGeIZ8a8FWS7a6s4reAXRZOkogZ2A\",\n  \"a\":  \"EgveY4-9XgOcLxUderzwLIr9Bf7V_NHwY1lkFrn9y2PY\",\n  \"e\":  \"ERH3dCdoFOLe71iheqcywJcnjtJtQIYPvAu6DZIl3MOA\",\n  \"r\":  \"Ee71iheqcywJcnjtJtQIYPvAu6DZIl3MORH3dCdoFOLB\"\n}",
            "data": {
                "v": "ACDC10JSON00011c_",
                "d": "EBdXt3gIXOf2BBWNHdSXCJnFJL5OuQPyM5K0neuniccM",
                "u": "0ANghkDaG7OY1wjaDAE0qHcg",
                "i": "did:keri:EmkPreYpZfFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPM",
                "rd": "EMwsxUelUauaXtMxTfPAMPAI6FkekwlOjkggtymRy7x",
                "s": "E46jrVPTzlSkUPqGGeIZ8a8FWS7a6s4reAXRZOkogZ2A",
                "a": "EgveY4-9XgOcLxUderzwLIr9Bf7V_NHwY1lkFrn9y2PY",
                "e": "ERH3dCdoFOLe71iheqcywJcnjtJtQIYPvAu6DZIl3MOA",
                "r": "Ee71iheqcywJcnjtJtQIYPvAu6DZIl3MORH3dCdoFOLB"
            },
            "basic_said": "EMADMbGLqFnGltOWrwvamL_hIiOxRKsmtSZBKw6Rl0MU",
            "compact_said": "EMADMbGLqFnGltOWrwvamL_hIiOxRKsmtSZBKw6Rl0MU"
        },
        "3": {
            "type": "json",
            "content": "{\n  \"$id\": \"EBdXt3gIXOf2BBWNHdSXCJnFJL5OuQPyM5K0neuniccM\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"title\": \"Compact Private ACDC\",\n  \"description\": \"Example JSON Schema for a Compact private ACDC.\",\n  \"credentialType\": \"CompactPrivateACDCExample\",\n  \"version\": \"1.0.0\",\n  \"type\": \"object\",\n  \"required\":\n  [\n    \"v\",\n    \"d\",\n    \"u\",\n    \"i\",\n    \"rd\",\n    \"s\",\n    \"a\",\n    \"e\",\n    \"r\"\n  ],\n  \"properties\":\n  {\n    \"v\":\n    {\n      \"description\": \"ACDC version string\",\n      \"type\": \"string\"\n    },\n    \"d\":\n    {\n     \"description\": \"ACDC SAID\",\n      \"type\": \"string\"\n    },\n    \"u\":\n    {\n     \"description\": \"ACDC UUID\",\n      \"type\": \"string\"\n    },\n    \"i\":\n    {\n      \"description\": \"Issuer AID\",\n      \"type\": \"string\"\n    },\n    \"rd\":\n    {\n      \"description\": \"Registry SAID\",\n      \"type\": \"string\"\n    },\n    \"s\": \n    {\n      \"description\": \"schema SAID\",\n      \"type\": \"string\"\n    },\n    \"a\": \n    {\n      \"description\": \"attribute SAID\",\n      \"type\": \"string\"\n    },\n    \"e\": \n    {\n      \"description\": \"edge SAID\",\n      \"type\": \"string\"\n    },\n    \"r\": \n    {\n      \"description\": \"rule SAID\",\n      \"type\": \"string\"\n    }\n  },\n  \"additionalProperties\": false\n}",
            "data": {
                "$id": "EBdXt3gIXOf2BBWNHdSXCJnFJL5OuQPyM5K0neuniccM",
                "$schema": "https://json-schema.org/draft/2020-12/schema",
                "title": "Compact Private ACDC",
                "description": "Example JSON Schema for a Compact private ACDC.",
                "credentialType": "CompactPrivateACDCExample",
                "version": "1.0.0",
                "type": "object",
                "required": [
                    "v",
                    "d",
                    "u",
                    "i",
                    "rd",
                    "s",
                    "a",
                    "e",
                    "r"
                ],
                "properties": {
                    "v": {
                        "description": "ACDC version string",
                        "type": "string"
                    },
                    "d": {
                        "description": "ACDC SAID",
                        "type": "string"
                    },
                    "u": {
                        "description": "ACDC UUID",
                        "type": "string"
                    },
                    "i": {
                        "description": "Issuer AID",
                        "type": "string"
                    },
                    "rd": {
                        "description": "Registry SAID",
                        "type": "string"
                    },
                    "s": {
                        "description": "schema SAID",
                        "type": "string"
                    },
                    "a": {
                        "description": "attribute SAID",
                        "type": "string"
                    },
                    "e": {
                        "description": "edge SAID",
                        "type": "string"
                    },
                    "r": {
                        "description": "rule SAID",
                        "type": "string"
                    }
                },
                "additionalProperties": false
            },
            "basic_said": "ENu4Dr1aBrnKqjXM8wiU6otHrVIanvhK191ngjl4v3Pe",
            "compact_said": "ENu4Dr1aBrnKqjXM8wiU6otHrVIanvhK191ngjl4v3Pe",
            "full": {
                "$id": "ENu4Dr1aBrnKqjXM8wiU6otHrVIanvhK191ngjl4v3Pe",
                "$schema": "https://json-schema.org/draft/2020-12/schema",
                "title": "Compact Private ACDC",
                "description": "Example JSON Schema for a Compact private ACDC.",
                "credentialType": "CompactPrivateACDCExample",
                "version": "1.0.0",
                "type": "object",
                "required": [
                    "v",
                    "d",
                    "u",
                    "i",
                    "rd",
                    "s",
                    "a",
                    "e",
                    "r"
                ],
                "properties": {
                    "v": {
                        "description": "ACDC version string",
                        "type": "string"
                    },
                    "d": {
                        "description": "ACDC SAID",
                        "type": "string"
                    },
                    "u": {
                        "description": "ACDC UUID",
                        "type": "string"
                    },
                    "i": {
                        "description": "Issuer AID",
                        "type": "string"
                    },
                    "rd": {
                        "description": "Registry SAID",
                        "type": "string"
                    },
                    "s": {
                        "description": "schema SAID",
                        "type": "string"
                    },
                    "a": {
                        "description": "attribute SAID",
                        "type": "string"
                    },
                    "e": {
                        "description": "edge SAID",
                        "type": "string"
                    },
                    "r": {
                        "description": "rule SAID",
                        "type": "string"
                    }
                },
                "additionalProperties": false
            }
        },
        "4": {
            "type": "json",
            "content": "{\n  \"a\":\n  {\n    \"description\": \"attribute section SAID\",\n    \"type\": \"string\"\n  }\n}",
            "data": {
                "a": {
                    "description": "attribute section SAID",
                    "type": "string"
                }
            }
        },
        "5": {
            "type": "json",
            "content": "{\n  \"a\":\n  {\n    \"d\": \"EgveY4-9XgOcLxUderzwLIr9Bf7V_NHwY1lkFrn9y2PY\",\n    \"i\": \"did:keri:EpZfFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPmkPreYA\",\n    \"temp\": 45,\n    \"lat\": \"N40.3433\",\n    \"lon\": \"W111.7208\"\n  }\n}",
            "data": {
                "a": {
                    "d": "EgveY4-9XgOcLxUderzwLIr9Bf7V_NHwY1lkFrn9y2PY",
                    "i": "did:keri:EpZfFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPmkPreYA",
                    "temp": 45,
                    "lat": "N40.3433",
                    "lon": "W111.7208"
                }
            },
            "compact_said": "EFRtELTZGIctDHrZfCyPOUoYJNar6deSPH051rBnWhao"
        },
        "6": {
            "type": "json",
            "content": "{\n  \"a\":\n  {\n    \"d\": \"EgveY4-9XgOcLxUderzwLIr9Bf7V_NHwY1lkFrn9y2PY\",\n    \"temp\": 45,\n    \"lat\": \"N40.3433\",\n    \"lon\": \"W111.7208\"\n  }\n}",
            "data": {
                "a": {
                    "d": "EgveY4-9XgOcLxUderzwLIr9Bf7V_NHwY1lkFrn9y2PY",
                    "temp": 45,
                    "lat": "N40.3433",
                    "lon": "W111.7208"
                }
            },
            "compact_said": "EE9e76m5MuVZh6IHsA8g32zg4SiO0hHqZDmHv821kkFQ"
        },
        "7": {
            "type": "json",
            "content": "{\n  \"a\":\n  {\n    \"d\": \"EgveY4-9XgOcLxUderzwLIr9Bf7V_NHwY1lkFrn9y2PY\",\n    \"u\": \"0AwjaDAE0qHcgNghkDaG7OY1\",\n    \"i\": \"did:keri:EpZfFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPmkPreYA\",\n    \"score\": 96,\n    \"name\": \"Jane Doe\"\n  }\n}",
            "data": {
                "a": {
                    "d": "EgveY4-9XgOcLxUderzwLIr9Bf7V_NHwY1lkFrn9y2PY",
                    "u": "0AwjaDAE0qHcgNghkDaG7OY1",
                    "i": "did:keri:EpZfFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPmkPreYA",
                    "score": 96,
                    "name": "Jane Doe"
                }
            },
            "compact_said": "EN4pw-1aNrmkJk4hzxJG-EHVVmbY0ngeXdmO1iORDL4N"
        },
        "8": {
            "type": "json",
            "content": "{\n  \"a\":\n  {\n    \"description\": \"attribute section\",\n    \"oneOf\":\n    [\n      {\n        \"description\": \"attribute SAID\",\n        \"type\": \"string\"\n      },\n      {\n        \"description\": \"uncompacted attribute section\",\n        \"type\": \"object\",\n        \"required\":\n        [\n          \"d\",\n          \"u\",\n          \"i\",\n          \"score\",\n          \"name\"\n        ],\n        \"properties\":\n        {\n          \"d\":\n          {\n            \"description\": \"attribute SAID\",\n            \"type\": \"string\"\n          },\n          \"u\":\n          {\n            \"description\": \"attribute UUID\",\n            \"type\": \"string\"\n          },\n          \"i\":\n          {\n            \"description\": \"Issuee AID\",\n            \"type\": \"string\"\n          },\n          \"score\":\n          {\n            \"description\": \"test score\",\n            \"type\": \"integer\"\n          },\n          \"name\":\n          {\n            \"description\": \"test taker full name\",\n            \"type\": \"string\"\n          }\n        },\n        \"additionalProperties\": false\n      }\n    ]\n  }\n}",
            "data": {
                "a": {
                    "description": "attribute section",
                    "oneOf": [
                        {
                            "description": "attribute SAID",
                            "type": "string"
                        },
                        {
                            "description": "uncompacted attribute section",
                            "type": "object",
                            "required": [
                                "d",
                                "u",
                                "i",
                                "score",
                                "name"
                            ],
                            "properties": {
                                "d": {
                                    "description": "attribute SAID",
                                    "type": "string"
                                },
                                "u": {
                                    "description": "attribute UUID",
                                    "type": "string"
                                },
                                "i": {
                                    "description": "Issuee AID",
                                    "type": "string"
                                },
                                "score": {
                                    "description": "test score",
                                    "type": "integer"
                                },
                                "name": {
                                    "description": "test taker full name",
                                    "type": "string"
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            }
        },
        "9": {
            "type": "json",
            "content": "{\n  \"a\":\n  {\n    \"d\": \"EgveY4-9XgOcLxUderzwLIr9Bf7V_NHwY1lkFrn9y2PY\",\n    \"i\": \"did:keri:EpZfFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPmkPreYA\",\n    \"score\": 96,\n    \"name\": \"Jane Doe\"\n  }\n}",
            "data": {
                "a": {
                    "d": "EgveY4-9XgOcLxUderzwLIr9Bf7V_NHwY1lkFrn9y2PY",
                    "i": "did:keri:EpZfFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPmkPreYA",
                    "score": 96,
                    "name": "Jane Doe"
                }
            },
            "compact_said": "EGthorNVI6IGJLsHHPxxH2HeyGtIlTfhGBbnR2f4NnLN"
        },
        "10": {
            "type": "json",
            "content": "{\n  \"a\":\n  {\n    \"description\": \"attribute section\",\n    \"oneOf\":\n    [\n      {\n        \"description\": \"attribute section SAID\",\n        \"type\": \"string\"\n      },\n      {\n        \"description\": \"uncompacted attribute section\",\n        \"type\": \"object\",\n        \"required\":\n        [\n          \"d\",\n          \"i\",\n          \"score\",\n          \"name\"\n        ],\n        \"properties\":\n        {\n          \"d\":\n          {\n            \"description\": \"attribute section SAID\",\n            \"type\": \"string\"\n          },\n           \"u\":\n          {\n            \"description\": \"attribute section UUID\",\n            \"type\": \"string\"\n          },\n          \"i\":\n          {\n            \"description\": \"Issuee AID\",\n            \"type\": \"string\"\n          },\n          \"score\":\n          {\n            \"description\": \"grade point average\",\n            \"type\": \"integer\"\n          },\n          \"name\":\n          {\n            \"description\": \"test taker full name\",\n            \"type\": \"string\"\n          }\n        },\n        \"additionalProperties\": false\n      }\n    ]\n  }\n}",
            "data": {
                "a": {
                    "description": "attribute section",
                    "oneOf": [
                        {
                            "description": "attribute section SAID",
                            "type": "string"
                        },
                        {
                            "description": "uncompacted attribute section",
                            "type": "object",
                            "required": [
                                "d",
                                "i",
                                "score",
                                "name"
                            ],
                            "properties": {
                                "d": {
                                    "description": "attribute section SAID",
                                    "type": "string"
                                },
                                "u": {
                                    "description": "attribute section UUID",
                                    "type": "string"
                                },
                                "i": {
                                    "description": "Issuee AID",
                                    "type": "string"
                                },
                                "score": {
                                    "description": "grade point average",
                                    "type": "integer"
                                },
                                "name": {
                                    "description": "test taker full name",
                                    "type": "string"
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            }
        },
        "11": {
            "type": "json",
            "content": "{\n  \"a\":\n  {\n    \"d\": \"EBf7V_NHwY1lkFrn9y2PYgveY4-9XgOcLxUderzwLIr9\",\n    \"u\": \"0ADAE0qHcgNghkDaG7OY1wja\",\n    \"i\": \"EFv7vklXKhzBrAqjsKAn2EDIPmkPreYApZfFk66jpf3u\",\n    \"name\": \"Jane Doe\",\n    \"gpa\": 3.50,\n    \"grades\":\n    {\n      \"d\": \"EBf7V_NHwY1lkFrn9y2PYgveY4-9XgOcLxUderzwLIr9\",\n      \"u\": \"0AHcgNghkDaG7OY1wjaDAE0q\",\n      \"history\": 3.00,\n      \"english\": 4.00,\n      \"math\": 3.0\n    }\n  }\n}",
            "data": {
                "a": {
                    "d": "EBf7V_NHwY1lkFrn9y2PYgveY4-9XgOcLxUderzwLIr9",
                    "u": "0ADAE0qHcgNghkDaG7OY1wja",
                    "i": "EFv7vklXKhzBrAqjsKAn2EDIPmkPreYApZfFk66jpf3u",
                    "name": "Jane Doe",
                    "gpa": 3.5,
                    "grades": {
                        "d": "EBf7V_NHwY1lkFrn9y2PYgveY4-9XgOcLxUderzwLIr9",
                        "u": "0AHcgNghkDaG7OY1wjaDAE0q",
                        "history": 3.0,
                        "english": 4.0,
                        "math": 3.0
                    }
                }
            },
            "compact_said": "EGNMr0k1i-A1cpYnGBvUBI-qyB2968vAD8GpnPkzqYFh",
            "full": {
                "d": "EGNMr0k1i-A1cpYnGBvUBI-qyB2968vAD8GpnPkzqYFh",
                "u": "0ADAE0qHcgNghkDaG7OY1wja",
                "i": "EFv7vklXKhzBrAqjsKAn2EDIPmkPreYApZfFk66jpf3u",
                "name": "Jane Doe",
                "gpa": 3.5,
                "grades": {
                    "d": "EGExX1l7bo-_vgdeDfG_j8pFaqjvOcH_OsaR85L6sw9a",
                    "u": "0AHcgNghkDaG7OY1wjaDAE0q",
                    "history": 3.0,
                    "english": 4.0,
                    "math": 3.0
                }
            },
            "full_path": [
                "a"
            ]
        },
        "12": {
            "type": "json",
            "content": "{\n  \"a\":\n  {\n    \"description\": \"attribute section\",\n    \"oneOf\":\n    [\n      {\n        \"description\": \"attribute SAID\",\n        \"type\": \"string\"\n      },\n      {\n        \"description\": \"attribute section detail\",\n        \"type\": \"object\",\n        \"required\":\n        [\n          \"d\",\n          \"u\",\n          \"i\",\n          \"name\",\n          \"gpa\",\n          \"grades\"\n        ],\n        \"properties\":\n        {\n          \"d\":\n          {\n            \"description\": \"attribute SAID\",\n            \"type\": \"string\"\n          },\n          \"i\":\n          {\n            \"description\": \"Issuee AID\",\n            \"type\": \"string\"\n          },\n          \"name\":\n          {\n            \"description\": \"student full name\",\n            \"type\": \"string\"\n          },\n          \"gpa\":\n          {\n            \"description\": \"grade point average\",\n            \"type\": \"number\"\n          },\n          \"grades\":\n          {\n            \"description\": \"grades by subject block\",\n            \"oneOf\":\n            [\n              {\n                \"description\": \"block SAID\",\n                \"type\": \"string\"\n              },\n              {\n                \"description\": \"block detail\",\n                \"type\": \"object\",\n                \"required\":\n                [\n                  \"d\",\n                  \"u\",\n                  \"history\",\n                  \"english\",\n                  \"math\",\n                ],\n                \"properties\":\n                {\n                  \"d\":\n                  {\n                    \"description\": \"block SAID\",\n                    \"type\": \"string\"\n                  },\n                  \"u\":\n                  {\n                    \"description\": \"block UUID\",\n                    \"type\": \"string\"\n                  },\n                  \"history\":\n                  {\n                    \"description\": \"history grade\",\n                    \"type\": \"number\"\n                  },\n                  \"english\":\n                  {\n                    \"description\": \"english grade\",\n                    \"type\": \"number\"\n                  },\n                  \"math\":\n                  {\n                    \"description\": \"math grade\",\n                    \"type\": \"number\"\n                  }\n                },\n                \"additionalProperties\": false\n              }\n            ]\n          },\n          \"additionalProperties\": false\n        }\n      }\n    ]\n  }\n}",
            "data": {
                "a": {
                    "description": "attribute section",
                    "oneOf": [
                        {
                            "description": "attribute SAID",
                            "type": "string"
                        },
                        {
                            "description": "attribute section detail",
                            "type": "object",
                            "required": [
                                "d",
                                "u",
                                "i",
                                "name",
                                "gpa",
                                "grades"
                            ],
                            "properties": {
                                "d": {
                                    "description": "attribute SAID",
                                    "type": "string"
                                },
                                "i": {
                                    "description": "Issuee AID",
                                    "type": "string"
                                },
                                "name": {
                                    "description": "student full name",
                                    "type": "string"
                                },
                                "gpa": {
                                    "description": "grade point average",
                                    "type": "number"
                                },
                                "grades": {
                                    "description": "grades by subject block",
                                    "oneOf": [
                                        {
                                            "description": "block SAID",
                                            "type": "string"
                                        },
                                        {
                                            "description": "block detail",
                                            "type": "object",
                                            "required": [
                                                "d",
                                                "u",
                                                "history",
                                                "english",
                                                "math"
                                            ],
                                            "properties": {
                                                "d": {
                                                    "description": "block SAID",
                                                    "type": "string"
                                                },
                                                "u": {
                                                    "description": "block UUID",
                                                    "type": "string"
                                                },
                                                "history": {
                                                    "description": "history grade",
                                                    "type": "number"
                                                },
                                                "english": {
                                                    "description": "english grade",
                                                    "type": "number"
                                                },
                                                "math": {
                                                    "description": "math grade",
                                                    "type": "number"
                                                }
                                            },
                                            "additionalProperties": false
                                        }
                                    ]
                                },
                                "additionalProperties": false
                            }
                        }
                    ]
                }
            }
        },
        "13": {
            "type": "json",
            "content": "{\n  \"a\":\n  {\n    \"d\": \"EBf7V_NHwY1lkFrn9y2PYgveY4-9XgOcLxUderzwLIr9\",\n    \"u\": \"0ADAE0qHcgNghkDaG7OY1wja\",\n    \"i\": \"EFv7vklXKhzBrAqjsKAn2EDIPmkPreYApZfFk66jpf3u\",\n    \"name\": \"Jane Doe\",\n    \"gpa\": 3.50,\n    \"grades\": \"EBf7V_NHwY1lkFrn9y2PYgveY4-9XgOcLxUderzwLIr9\"\n  }\n}",
            "data": {
                "a": {
                    "d": "EBf7V_NHwY1lkFrn9y2PYgveY4-9XgOcLxUderzwLIr9",
                    "u": "0ADAE0qHcgNghkDaG7OY1wja",
                    "i": "EFv7vklXKhzBrAqjsKAn2EDIPmkPreYApZfFk66jpf3u",
                    "name": "Jane Doe",
                    "gpa": 3.5,
                    "grades": "EBf7V_NHwY1lkFrn9y2PYgveY4-9XgOcLxUderzwLIr9"
                }
            },
            "compact_said": "EMj4J0dSCpm4BlK7_GuaFhmaDFAZh43GEZxjw3DX5TxN"
        },
        "14": {
            "type": "json",
            "content": "{\n  \"v\":  \"ACDCCAAJSONAACD.\",\n  \"d\":  \"EBdXt3gIXOf2BBWNHdSXCJnFJL5OuQPyM5K0neuniccM\",\n  \"u\":  \"0ANghkDaG7OY1wjaDAE0qHcg\",\n  \"i\":  \"EmkPreYpZfFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPM\",\n  \"rd\": \"EMwsxUelUauaXtMxTfPAMPAI6FkekwlOjkggtymRy7x\",\n  \"s\":  \"E46jrVPTzlSkUPqGGeIZ8a8FWS7a6s4reAXRZOkogZ2A\",\n  \"a\":  \"EgveY4-9XgOcLxUderzwLIr9Bf7V_NHwY1lkFrn9y2PY\",\n  \"e\":  \"EFOLe71iheqcywJcnjtJtQIYPvAu6DZIl3MOARH3dCdo\",\n  \"r\":  \"Ee71iheqcywJcnjtJtQIYPvAu6DZIl3MORH3dCdoFOLB\"\n}",
            "data": {
                "v": "ACDCCAAJSONAACD.",
                "d": "EBdXt3gIXOf2BBWNHdSXCJnFJL5OuQPyM5K0neuniccM",
                "u": "0ANghkDaG7OY1wjaDAE0qHcg",
                "i": "EmkPreYpZfFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPM",
                "rd": "EMwsxUelUauaXtMxTfPAMPAI6FkekwlOjkggtymRy7x",
                "s": "E46jrVPTzlSkUPqGGeIZ8a8FWS7a6s4reAXRZOkogZ2A",
                "a": "EgveY4-9XgOcLxUderzwLIr9Bf7V_NHwY1lkFrn9y2PY",
                "e": "EFOLe71iheqcywJcnjtJtQIYPvAu6DZIl3MOARH3dCdo",
                "r": "Ee71iheqcywJcnjtJtQIYPvAu6DZIl3MORH3dCdoFOLB"
            },
            "basic_said": "ED2rZEa3oV166tzz0mnZEy9CwKJi3alr15eVtHN0FVJb",
            "compact_said": "ED2rZEa3oV166tzz0mnZEy9CwKJi3alr15eVtHN0FVJb"
        },
        "15": {
            "type": "json",
            "content": "{\n  \"v\":  \"ACDCCAAJSONAACD.\",\n  \"d\":  \"ECJnFJL5OuQPyM5K0neuniccMBdXt3gIXOf2BBWNHdSX\",\n  \"u\":  \"0AG7OY1wjaDAE0qHcgNghkDa\",\n  \"i\":  \"EFk66jpf3uFv7An2EDIPMvklXKhmkPreYpZfzBrAqjsK\",\n  \"rd\": \"EMwsxUelUauaXtMxTfPAMPAI6FkekwlOjkggtymRy7x\",\n  \"s\":  \"EGeIZ8a8FWS7a6s4reAXRZOkogZ2A46jrVPTzlSkUPqG\",\n  \"a\":  \"EBf7V_NHwY1lkFrn9y2PYgveY4-9XgOcLxUderzwLIr9\",\n  \"r\":  \"EMORH3dCdoFOLBe71iheqcywJcnjtJtQIYPvAu6DZIl3\"\n}",
            "data": {
                "v": "ACDCCAAJSONAACD.",
                "d": "ECJnFJL5OuQPyM5K0neuniccMBdXt3gIXOf2BBWNHdSX",
                "u": "0AG7OY1wjaDAE0qHcgNghkDa",
                "i": "EFk66jpf3uFv7An2EDIPMvklXKhmkPreYpZfzBrAqjsK",
                "rd": "EMwsxUelUauaXtMxTfPAMPAI6FkekwlOjkggtymRy7x",
                "s": "EGeIZ8a8FWS7a6s4reAXRZOkogZ2A46jrVPTzlSkUPqG",
                "a": "EBf7V_NHwY1lkFrn9y2PYgveY4-9XgOcLxUderzwLIr9",
                "r": "EMORH3dCdoFOLBe71iheqcywJcnjtJtQIYPvAu6DZIl3"
            },
            "basic_said": "EEpLSF7HaWAWGIPlgiOPd9Vbczs0gWDiqlWSs1FjMskM",
            "compact_said": "EEpLSF7HaWAWGIPlgiOPd9Vbczs0gWDiqlWSs1FjMskM"
        },
        "16": {
            "type": "json",
            "content": "{\n  \"v\":  \"ACDCCAAJSONAACD.\",\n  \"d\":  \"EK0neuniccMBdXt3gIXOf2BBWNHdSXCJnFJL5OuQPyM5\",\n  \"u\":  \"0ADAE0qHcgNghkDaG7OY1wja\",\n  \"i\":  \"EDIPMvklXKhmkPreYpZfzBrAqjsKFk66jpf3uFv7An2E\",\n  \"rd\": \"EMwsxUelUauaXtMxTfPAMPAI6FkekwlOjkggtymRy7x\",\n  \"s\":  \"EFWS7a6s4reAXRZOkogZ2A46jrVPTzlSkUPqGGeIZ8a8\",\n  \"a\":  \"EIr9Bf7V_NHwY1lkFrn9y2PYgveY4-9XgOcLxUderzwL\",\n  \"r\":  \"EBe71iheqcywJcnjtJtQIYPvAu6DZIl3MORH3dCdoFOL\"\n}",
            "data": {
                "v": "ACDCCAAJSONAACD.",
                "d": "EK0neuniccMBdXt3gIXOf2BBWNHdSXCJnFJL5OuQPyM5",
                "u": "0ADAE0qHcgNghkDaG7OY1wja",
                "i": "EDIPMvklXKhmkPreYpZfzBrAqjsKFk66jpf3uFv7An2E",
                "rd": "EMwsxUelUauaXtMxTfPAMPAI6FkekwlOjkggtymRy7x",
                "s": "EFWS7a6s4reAXRZOkogZ2A46jrVPTzlSkUPqGGeIZ8a8",
                "a": "EIr9Bf7V_NHwY1lkFrn9y2PYgveY4-9XgOcLxUderzwL",
                "r": "EBe71iheqcywJcnjtJtQIYPvAu6DZIl3MORH3dCdoFOL"
            },
            "basic_said": "EMhgqFwCvemkwYuqTeRfQhIoBX2KPbsnLoml9YoePyYo",
            "compact_said": "EMhgqFwCvemkwYuqTeRfQhIoBX2KPbsnLoml9YoePyYo"
        },
        "17": {
            "type": "json",
            "content": "{\n  \"v\":  \"ACDCCAAJSONAACD.\",\n  \"d\":  \"EBWNHdSXCJnFJL5OuQPyM5K0neuniccMBdXt3gIXOf2B\",\n  \"u\":  \"0AHcgNghkDaG7OY1wjaDAE0q\",\n  \"i\":  \"EAqjsKFk66jpf3uFv7An2EDIPMvklXKhmkPreYpZfzBr\",\n  \"rd\": \"EMwsxUelUauaXtMxTfPAMPAI6FkekwlOjkggtymRy7x\",\n  \"s\":  \"EAXRZOkogZ2A46jrVPTzlSkUPqGGeIZ8a8FWS7a6s4re\",\n  \"a\":  \"EFrn9y2PYgveY4-9XgOcLxUderzwLIr9Bf7V_NHwY1lk\",\n  \"r\":  \"EH3dCdoFOLBe71iheqcywJcnjtJtQIYPvAu6DZIl3MOR\"\n}",
            "data": {
                "v": "ACDCCAAJSONAACD.",
                "d": "EBWNHdSXCJnFJL5OuQPyM5K0neuniccMBdXt3gIXOf2B",
                "u": "0AHcgNghkDaG7OY1wjaDAE0q",
                "i": "EAqjsKFk66jpf3uFv7An2EDIPMvklXKhmkPreYpZfzBr",
                "rd": "EMwsxUelUauaXtMxTfPAMPAI6FkekwlOjkggtymRy7x",
                "s": "EAXRZOkogZ2A46jrVPTzlSkUPqGGeIZ8a8FWS7a6s4re",
                "a": "EFrn9y2PYgveY4-9XgOcLxUderzwLIr9Bf7V_NHwY1lk",
                "r": "EH3dCdoFOLBe71iheqcywJcnjtJtQIYPvAu6DZIl3MOR"
            },
            "basic_said": "EHmi8mYC7sdRf0jEy2D4zmtWSvvdYWsWWrFJ84hGh6Yd",
            "compact_said": "EHmi8mYC7sdRf0jEy2D4zmtWSvvdYWsWWrFJ84hGh6Yd"
        },
        "18": {
            "type": "json",
            "content": "{\n  \"e\":\n  {\n    \"d\": \"EFOLe71iheqcywJcnjtJtQIYPvAu6DZIl3MOARH3dCdo\",\n    \"u\": \"0AwjaDAE0qHcgNghkDaG7OY1\",\n    \"poe\":\n    {\n      \"d\": \"E2PgveY4-9XgOcLxUdYerzwLIr9Bf7V_NHwY1lkFrn9y\",\n      \"u\": \"0ANghkDaG7OY1wjaDAE0qHcg\",\n      \"n\": \"ECJnFJL5OuQPyM5K0neuniccMBdXt3gIXOf2BBWNHdSX\",\n      \"s\": \"ELIr9Bf7V_NHwY1lkFrn9y2PgveY4-9XgOcLxUdYerzw\"\n    },\n    \"data\":\n    {\n      \"d\": \"ELxUdYerzwLIr9Bf7V_NHwY1lkFrn9y2PgveY4-9XgOc\",\n      \"u\": \"0ADAE0qHcgNghkDaG7OY1wja\",\n      \"n\": \"EK0neuniccMBdXt3gIXOf2BBWNHdSXCJnFJL5OuQPyM5\",\n      \"s\": \"EHwY1lkFrn9y2PgveY4-9XgOcLxUdYerzwLIr9Bf7V_N\",\n      \"o\": \"NI2I\"\n    }\n  }\n}",
            "data": {
                "e": {
                    "d": "EFOLe71iheqcywJcnjtJtQIYPvAu6DZIl3MOARH3dCdo",
                    "u": "0AwjaDAE0qHcgNghkDaG7OY1",
                    "poe": {
                        "d": "E2PgveY4-9XgOcLxUdYerzwLIr9Bf7V_NHwY1lkFrn9y",
                        "u": "0ANghkDaG7OY1wjaDAE0qHcg",
                        "n": "ECJnFJL5OuQPyM5K0neuniccMBdXt3gIXOf2BBWNHdSX",
                        "s": "ELIr9Bf7V_NHwY1lkFrn9y2PgveY4-9XgOcLxUdYerzw"
                    },
                    "data": {
                        "d": "ELxUdYerzwLIr9Bf7V_NHwY1lkFrn9y2PgveY4-9XgOc",
                        "u": "0ADAE0qHcgNghkDaG7OY1wja",
                        "n": "EK0neuniccMBdXt3gIXOf2BBWNHdSXCJnFJL5OuQPyM5",
                        "s": "EHwY1lkFrn9y2PgveY4-9XgOcLxUdYerzwLIr9Bf7V_N",
                        "o": "NI2I"
                    }
                }
            },
            "compact_said": "EG1tWpPLuLcV52QaglwSHdex4U7PPHNhwler-25urKqC",
            "full": {
                "d": "EG1tWpPLuLcV52QaglwSHdex4U7PPHNhwler-25urKqC",
                "u": "0AwjaDAE0qHcgNghkDaG7OY1",
                "poe": {
                    "d": "EKJGcxOlhz08bQ9IUukIKl19pPmKpZ81RelPncz29xL2",
                    "u": "0ANghkDaG7OY1wjaDAE0qHcg",
                    "n": "ECJnFJL5OuQPyM5K0neuniccMBdXt3gIXOf2BBWNHdSX",
                    "s": "ELIr9Bf7V_NHwY1lkFrn9y2PgveY4-9XgOcLxUdYerzw"
                },
                "data": {
                    "d": "EO6KOA3fmGtIW65F66oHNMmYOh6x4i8tGJJI0XwRAx9w",
                    "u": "0ADAE0qHcgNghkDaG7OY1wja",
                    "n": "EK0neuniccMBdXt3gIXOf2BBWNHdSXCJnFJL5OuQPyM5",
                    "s": "EHwY1lkFrn9y2PgveY4-9XgOcLxUdYerzwLIr9Bf7V_N",
                    "o": "NI2I"
                }
            },
            "full_path": [
                "e"
            ]
        },
        "19": {
            "type": "json",
            "content": "{\n  \"e\":\n  {\n    \"d\": \"EFOLe71iheqcywJcnjtJtQIYPvAu6DZIl3MOARH3dCdo\",\n    \"u\": \"0AwjaDAE0qHcgNghkDaG7OY1\",\n    \"poe\": \"E2PgveY4-9XgOcLxUdYerzwLIr9Bf7V_NHwY1lkFrn9y\",\n    \"data\": \"ELxUdYerzwLIr9Bf7V_NHwY1lkFrn9y2PgveY4-9XgOc\"\n  }\n}",
            "data": {
                "e": {
                    "d": "EFOLe71iheqcywJcnjtJtQIYPvAu6DZIl3MOARH3dCdo",
                    "u": "0AwjaDAE0qHcgNghkDaG7OY1",
                    "poe": "E2PgveY4-9XgOcLxUdYerzwLIr9Bf7V_NHwY1lkFrn9y",
                    "data": "ELxUdYerzwLIr9Bf7V_NHwY1lkFrn9y2PgveY4-9XgOc"
                }
            },
            "compact_said": "EF2gO-j4vFaf2Ln_Vm5Dzl5UnFJeBLEvYHY4Ywlox-KB"
        },
        "20": {
            "type": "json",
            "content": "\"e\":\n{\n  \"description\": \"edge section\",\n  \"oneOf\":\n  [\n    {\n      \"description\": \"edge section SAID\",\n      \"type\": \"string\"\n    },\n    {\n      \"description\": \"edge section detail\",\n      \"type\": \"object\",\n      \"required\":\n      [\n        \"d\",\n        \"u\",\n        \"poe\",\n        \"data\"\n      ],\n      \"properties\":\n      {\n        \"d\":\n        {\n          \"description\": \"edge section SAID\",\n          \"type\": \"string\"\n        },\n        \"u\":\n        {\n          \"description\": \"edge section UUID\",\n          \"type\": \"string\"\n        },\n        \"poe\":\n        {\n          \"description\": \"proof of entitlement edge\",\n          \"oneOf\":\n          [\n            {\n              \"description\": \"compact form edge detail SAID\",\n              \"type\": \"string\"\n            },\n            {\n              \"description\": \"edge detail\",\n              \"type\": \"object\",\n              \"required\":\n              [\n                \"d\",\n                \"u\",\n                \"n\",\n                \"s\"\n              ],\n              \"properties\":\n              {\n                \"d\":\n                {\n                  \"description\": \"edge SAID\",\n                  \"type\": \"string\"\n                },\n                \"u\":\n                {\n                  \"description\": \"edge UUID\",\n                  \"type\": \"string\"\n                },\n                \"n\":\n                {\n                  \"description\": \"far node SAID\",\n                  \"type\": \"string\"\n                },\n                \"s\":\n                {\n                  \"description\": \"far node schema SAID\",\n                  \"type\": \"string\",\n                  \"const\": \"ELIr9Bf7V_NHwY1lkFrn9y2PgveY4-9XgOcLxUdYerzw\",\n                }\n              },\n              \"additionalProperties\": false\n            }\n          ]\n        },\n        \"data\":\n        {\n          \"description\": \"data edge\",\n          \"oneOf\":\n          [\n            {\n              \"description\": \"compact form edge detail SAID\",\n              \"type\": \"string\"\n            },\n            {\n              \"description\": \"data edge detail\",\n              \"type\": \"object\",\n              \"required\":\n              [\n                \"d\",\n                \"u\",\n                \"n\",\n                \"s\",\n                \"o\"\n              ],\n              \"properties\":\n              {\n                \"d\":\n                {\n                  \"description\": \"edge SAID\",\n                  \"type\": \"string\"\n                },\n                \"u\":\n                {\n                  \"description\": \"edge UUID\",\n                  \"type\": \"string\"\n                },\n                \"n\":\n                {\n                  \"description\": \"far node SAID\",\n                  \"type\": \"string\"\n                },\n                \"s\":\n                {\n                  \"description\": \"far node schema SAID\",\n                  \"type\": \"string\",\n                  \"const\": \"EHwY1lkFrn9y2PgveY4-9XgOcLxUdYerzwLIr9Bf7V_N\",\n                },\n                \"o\":\n                {\n                  \"description\": \"unary edge operator\",\n                  \"type\": \"string\"\n                },\n              },\n              \"additionalProperties\": false\n            },\n          ]\n        }\n      },\n      \"additionalProperties\": false\n    }\n  ]\n}",
            "data": {
                "e": {
                    "description": "edge section",
                    "oneOf": [
                        {
                            "description": "edge section SAID",
                            "type": "string"
                        },
                        {
                            "description": "edge section detail",
                            "type": "object",
                            "required": [
                                "d",
                                "u",
                                "poe",
                                "data"
                            ],
                            "properties": {
                                "d": {
                                    "description": "edge section SAID",
                                    "type": "string"
                                },
                                "u": {
                                    "description": "edge section UUID",
                                    "type": "string"
                                },
                                "poe": {
                                    "description": "proof of entitlement edge",
                                    "oneOf": [
                                        {
                                            "description": "compact form edge detail SAID",
                                            "type": "string"
                                        },
                                        {
                                            "description": "edge detail",
                                            "type": "object",
                                            "required": [
                                                "d",
                                                "u",
                                                "n",
                                                "s"
                                            ],
                                            "properties": {
                                                "d": {
                                                    "description": "edge SAID",
                                                    "type": "string"
                                                },
                                                "u": {
                                                    "description": "edge UUID",
                                                    "type": "string"
                                                },
                                                "n": {
                                                    "description": "far node SAID",
                                                    "type": "string"
                                                },
                                                "s": {
                                                    "description": "far node schema SAID",
                                                    "type": "string",
                                                    "const": "ELIr9Bf7V_NHwY1lkFrn9y2PgveY4-9XgOcLxUdYerzw"
                                                }
                                            },
                                            "additionalProperties": false
                                        }
                                    ]
                                },
                                "data": {
                                    "description": "data edge",
                                    "oneOf": [
                                        {
                                            "description": "compact form edge detail SAID",
                                            "type": "string"
                                        },
                                        {
                                            "description": "data edge detail",
                                            "type": "object",
                                            "required": [
                                                "d",
                                                "u",
                                                "n",
                                                "s",
                                                "o"
                                            ],
                                            "properties": {
                                                "d": {
                                                    "description": "edge SAID",
                                                    "type": "string"
                                                },
                                                "u": {
                                                    "description": "edge UUID",
                                                    "type": "string"
                                                },
                                                "n": {
                                                    "description": "far node SAID",
                                                    "type": "string"
                                                },
                                                "s": {
                                                    "description": "far node schema SAID",
                                                    "type": "string",
                                                    "const": "EHwY1lkFrn9y2PgveY4-9XgOcLxUdYerzwLIr9Bf7V_N"
                                                },
                                                "o": {
                                                    "description": "unary edge operator",
                                                    "type": "string"
                                                }
                                            },
                                            "additionalProperties": false
                                        }
                                    ]
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            }
        },
        "21": {
            "type": "json",
            "content": "\"a\":\n{\n  \"d\": \"EgveY4-9XgOcLxUderzwLIr9Bf7V_NHwY1lkFrn9y2PY\",\n  \"u\": \"0ADAE0qHcgNghkDaG7OY1wja\",\n  \"i\": \"EmkPreYpZfFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPM\",\n}",
            "data": {
                "a": {
                    "d": "EgveY4-9XgOcLxUderzwLIr9Bf7V_NHwY1lkFrn9y2PY",
                    "u": "0ADAE0qHcgNghkDaG7OY1wja",
                    "i": "EmkPreYpZfFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPM"
                }
            },
            "compact_said": "EApo8aePT2EFJkM8X4QWzLj1pHPTremEOUmWpcfmj4pV"
        },
        "22": {
            "type": "json",
            "content": "{\n  \"v\":  \"ACDCCAAJSONAACD.\",\n  \"d\":  \"EHdSXCJnBWNFJL5OuQPyM5K0neunicIXOf2BcMBdXt3g\",\n  \"u\":  \"0ADaG7OY1wjaDAE0qHcgNghk\",\n  \"i\":  \"EmkPreYpZfFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPM\",\n  \"rd\": \"EMwsxUelUauaXtMxTfPAMPAI6FkekwlOjkggtymRy7x\",\n  \"s\":  \"EFWS7a6s4reAXRZOkogZ2A46jrVPTzlSkUPqGGeIZ8a8\",\n  \"a\":  \"EgveY4-9XgOcLxUderzwLIr9Bf7V_NHwY1lkFrn9y2PY\",\n  \"e\":  \"EJtQIYPvAu6DZIl3MOARH3dCdoFOLe71iheqcywJcnjt\",\n  \"r\":  \"Ee71iheqcywJcnjtJtQIYPvAu6DZIl3MORH3dCdoFOLB\"\n}",
            "data": {
                "v": "ACDCCAAJSONAACD.",
                "d": "EHdSXCJnBWNFJL5OuQPyM5K0neunicIXOf2BcMBdXt3g",
                "u": "0ADaG7OY1wjaDAE0qHcgNghk",
                "i": "EmkPreYpZfFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPM",
                "rd": "EMwsxUelUauaXtMxTfPAMPAI6FkekwlOjkggtymRy7x",
                "s": "EFWS7a6s4reAXRZOkogZ2A46jrVPTzlSkUPqGGeIZ8a8",
                "a": "EgveY4-9XgOcLxUderzwLIr9Bf7V_NHwY1lkFrn9y2PY",
                "e": "EJtQIYPvAu6DZIl3MOARH3dCdoFOLe71iheqcywJcnjt",
                "r": "Ee71iheqcywJcnjtJtQIYPvAu6DZIl3MORH3dCdoFOLB"
            },
            "basic_said": "ECYLdOjed8PPayMshVe8i260d_9PgSzIVVQDEfyy2WYR",
            "compact_said": "ECYLdOjed8PPayMshVe8i260d_9PgSzIVVQDEfyy2WYR"
        },
        "23": {
            "type": "json",
            "content": "{\n  \"e\":\n  {\n    \"d\": \"EJtQIYPvAu6DZIl3MOARH3dCdoFOLe71iheqcywJcnjt\",\n    \"u\": \"0AwjaDAE0qHcgNghkDaG7OY1\",\n    \"poe\":\n    {\n      \"d\": \"E2PgveY4-9XgOcLxUdYerzwLIr9Bf7V_NHwY1lkFrn9y\",\n      \"u\": \"0ANghkDaG7OY1wjaDAE0qHcg\",\n      \"n\": \"ECJnFJL5OuQPyM5K0neuniccMBdXt3gIXOf2BBWNHdSX\",\n      \"s\": \"ELIr9Bf7V_NHwY1lkFrn9y2PgveY4-9XgOcLxUdYerzw\"\n    },\n    \"poa\":\n    {\n      \"d\": \"E2PgveY4-9XgOcLxUdYerzwLIr9Bf7V_NHwY1lkFrn9y\",\n      \"u\": \"0ANghkDaG7OY1wjaDAE0qHcg\",\n      \"o\": \"OR\",\n      \"sewer\":\n      {\n        \"d\": \"ELxUdYerzwLIr9Bf7V_NHwY1lkFrn9y2PgveY4-9XgOc\",\n        \"u\": \"0ADAE0qHcgNghkDaG7OY1wja\",\n        \"n\": \"EK0neuniccMBdXt3gIXOf2BBWNHdSXCJnFJL5OuQPyM5\",\n        \"s\": \"EHwY1lkFrn9y2PgveY4-9XgOcLxUdYerzwLIr9Bf7V_N\",\n      },\n      \"gas\":\n      {\n        \"d\": \"EHwY1lkFrn9y2PgveY4-9XgOcLxUdYerzwLIr9Bf7V_N\",\n        \"u\": \"0AAE0qHcgNghkDaG7OY1wjaD\",\n        \"n\": \"EBWNHdSXCJnFJL5OuQPyM5K0neuniccMBdXt3gIXOf2B\",\n        \"s\": \"EFrn9y2PgveY4-9XgOcLxUdYerzwLIr9Bf7V_NHwY1lk\",\n      }\n    }\n  }\n}",
            "data": {
                "e": {
                    "d": "EJtQIYPvAu6DZIl3MOARH3dCdoFOLe71iheqcywJcnjt",
                    "u": "0AwjaDAE0qHcgNghkDaG7OY1",
                    "poe": {
                        "d": "E2PgveY4-9XgOcLxUdYerzwLIr9Bf7V_NHwY1lkFrn9y",
                        "u": "0ANghkDaG7OY1wjaDAE0qHcg",
                        "n": "ECJnFJL5OuQPyM5K0neuniccMBdXt3gIXOf2BBWNHdSX",
                        "s": "ELIr9Bf7V_NHwY1lkFrn9y2PgveY4-9XgOcLxUdYerzw"
                    },
                    "poa": {
                        "d": "E2PgveY4-9XgOcLxUdYerzwLIr9Bf7V_NHwY1lkFrn9y",
                        "u": "0ANghkDaG7OY1wjaDAE0qHcg",
                        "o": "OR",
                        "sewer": {
                            "d": "ELxUdYerzwLIr9Bf7V_NHwY1lkFrn9y2PgveY4-9XgOc",
                            "u": "0ADAE0qHcgNghkDaG7OY1wja",
                            "n": "EK0neuniccMBdXt3gIXOf2BBWNHdSXCJnFJL5OuQPyM5",
                            "s": "EHwY1lkFrn9y2PgveY4-9XgOcLxUdYerzwLIr9Bf7V_N"
                        },
                        "gas": {
                            "d": "EHwY1lkFrn9y2PgveY4-9XgOcLxUdYerzwLIr9Bf7V_N",
                            "u": "0AAE0qHcgNghkDaG7OY1wjaD",
                            "n": "EBWNHdSXCJnFJL5OuQPyM5K0neuniccMBdXt3gIXOf2B",
                            "s": "EFrn9y2PgveY4-9XgOcLxUdYerzwLIr9Bf7V_NHwY1lk"
                        }
                    }
                }
            },
            "compact_said": "ENfn4m-3aYtK63uiGBe_Zz4kQ7SY8YKcme2osUmxFlXH",
            "full": {
                "d": "ENfn4m-3aYtK63uiGBe_Zz4kQ7SY8YKcme2osUmxFlXH",
                "u": "0AwjaDAE0qHcgNghkDaG7OY1",
                "poe": {
                    "d": "EKJGcxOlhz08bQ9IUukIKl19pPmKpZ81RelPncz29xL2",
                    "u": "0ANghkDaG7OY1wjaDAE0qHcg",
                    "n": "ECJnFJL5OuQPyM5K0neuniccMBdXt3gIXOf2BBWNHdSX",
                    "s": "ELIr9Bf7V_NHwY1lkFrn9y2PgveY4-9XgOcLxUdYerzw"
                },
                "poa": {
                    "d": "EPMU7jABFTOXPHpCykXv7edD7eMvz1NrX3jIm0UEztoI",
                    "u": "0ANghkDaG7OY1wjaDAE0qHcg",
                    "o": "OR",
                    "sewer": {
                        "d": "EJx_UFGkyIad7VF_wGOJxoTdp_500AKuBvdbdXX7KR_8",
                        "u": "0ADAE0qHcgNghkDaG7OY1wja",
                        "n": "EK0neuniccMBdXt3gIXOf2BBWNHdSXCJnFJL5OuQPyM5",
                        "s": "EHwY1lkFrn9y2PgveY4-9XgOcLxUdYerzwLIr9Bf7V_N"
                    },
                    "gas": {
                        "d": "EGdn4ZhVxF_vxy-Jt36pypBxpAj52MH23dPbsU6-f8Z1",
                        "u": "0AAE0qHcgNghkDaG7OY1wjaD",
                        "n": "EBWNHdSXCJnFJL5OuQPyM5K0neuniccMBdXt3gIXOf2B",
                        "s": "EFrn9y2PgveY4-9XgOcLxUdYerzwLIr9Bf7V_NHwY1lk"
                    }
                }
            },
            "full_path": [
                "e"
            ]
        },
        "24": {
            "type": "json",
            "content": "\"e\":\n{\n  \"description\": \"edge section\",\n  \"oneOf\":\n  [\n    {\n      \"description\": \"edge section SAID\",\n      \"type\": \"string\"\n    },\n    {\n      \"description\": \"edge detail\",\n      \"type\": \"object\",\n      \"required\":\n      [\n        \"d\",\n        \"u\",\n        \"poe\",\n        \"poa\"\n      ],\n      \"properties\":\n      {\n        \"d\":\n        {\n          \"description\": \"edge section SAID\",\n          \"type\": \"string\"\n        },\n        \"u\":\n        {\n          \"description\": \"edge section UUID\",\n          \"type\": \"string\"\n        },\n        \"poe\":\n        {\n          \"description\": \"entitlement edge\",\n          \"type\": \"object\",\n          \"required\":\n          [\n            \"d\",\n            \"u\",\n            \"n\",\n            \"s\"\n          ],\n          \"properties\":\n          {\n            \"d\":\n            {\n              \"description\": \"edge SAID\",\n              \"type\": \"string\"\n            },\n            \"u\":\n            {\n              \"description\": \"edge UUID\",\n              \"type\": \"string\"\n            },\n            \"n\":\n            {\n              \"description\": \"far node SAID\",\n              \"type\": \"string\"\n            },\n            \"s\":\n            {\n              \"description\": \"far node schema SAID\",\n              \"type\": \"string\",\n              \"const\": \"ELIr9Bf7V_NHwY1lkFrn9y2PgveY4-9XgOcLxUdYerzw\",\n            }\n          },\n          \"additionalProperties\": false\n        },\n        \"poa\":\n        {\n          \"description\": \"proof of address group\",\n          \"type\": \"object\",\n          \"required\":\n          [\n            \"d\",\n            \"u\",\n            \"o\",\n            \"sewer\",\n            \"gas\"\n          ],\n          \"properties\":\n          {\n            \"d\":\n            {\n              \"description\": \"edge SAID\",\n              \"type\": \"string\"\n            },\n            \"u\":\n            {\n              \"description\": \"edge UUID\",\n              \"type\": \"string\"\n            },\n            \"o\":\n            {\n              \"description\": \"m-ary group operator\",\n              \"type\": \"string\",\n              \"const\": \"OR\"\n            },\n            \"sewer\":\n            {\n              \"description\": \"sewer address edge\",\n              \"type\": \"object\",\n              \"required\":\n              [\n                \"d\",\n                \"u\",\n                \"n\",\n                \"s\"\n              ],\n              \"properties\":\n              {\n                \"d\":\n                {\n                  \"description\": \"edge SAID\",\n                  \"type\": \"string\"\n                },\n                \"u\":\n                {\n                  \"description\": \"edge UUID\",\n                  \"type\": \"string\"\n                },\n                \"n\":\n                {\n                  \"description\": \"far node SAID\",\n                  \"type\": \"string\"\n                },\n                \"s\":\n                {\n                  \"description\": \"far node schema SAID\",\n                  \"type\": \"string\",\n                  \"const\": \"EHwY1lkFrn9y2PgveY4-9XgOcLxUdYerzwLIr9Bf7V_N\",\n                },\n              },\n              \"additionalProperties\": false\n            },\n            \"gas\":\n            {\n              \"description\": \"gas address edge\",\n              \"type\": \"object\",\n              \"required\":\n              [\n                \"d\",\n                \"u\",\n                \"n\",\n                \"s\"\n              ],\n              \"properties\":\n              {\n                \"d\":\n                {\n                  \"description\": \"edge SAID\",\n                  \"type\": \"string\"\n                },\n                \"u\":\n                {\n                  \"description\": \"edge UUID\",\n                  \"type\": \"string\"\n                },\n                \"n\":\n                {\n                  \"description\": \"far node SAID\",\n                  \"type\": \"string\"\n                },\n                \"s\":\n                {\n                  \"description\": \"far node schema SAID\",\n                  \"type\": \"string\",\n                  \"const\": \"EFrn9y2PgveY4-9XgOcLxUdYerzwLIr9Bf7V_NHwY1lk\",\n                },\n              },\n              \"additionalProperties\": false\n            }\n          },\n          \"additionalProperties\": false\n        },\n      },\n      \"additionalProperties\": false\n    }\n  ]\n}",
            "data": {
                "e": {
                    "description": "edge section",
                    "oneOf": [
                        {
                            "description": "edge section SAID",
                            "type": "string"
                        },
                        {
                            "description": "edge detail",
                            "type": "object",
                            "required": [
                                "d",
                                "u",
                                "poe",
                                "poa"
                            ],
                            "properties": {
                                "d": {
                                    "description": "edge section SAID",
                                    "type": "string"
                                },
                                "u": {
                                    "description": "edge section UUID",
                                    "type": "string"
                                },
                                "poe": {
                                    "description": "entitlement edge",
                                    "type": "object",
                                    "required": [
                                        "d",
                                        "u",
                                        "n",
                                        "s"
                                    ],
                                    "properties": {
                                        "d": {
                                            "description": "edge SAID",
                                            "type": "string"
                                        },
                                        "u": {
                                            "description": "edge UUID",
                                            "type": "string"
                                        },
                                        "n": {
                                            "description": "far node SAID",
                                            "type": "string"
                                        },
                                        "s": {
                                            "description": "far node schema SAID",
                                            "type": "string",
                                            "const": "ELIr9Bf7V_NHwY1lkFrn9y2PgveY4-9XgOcLxUdYerzw"
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "poa": {
                                    "description": "proof of address group",
                                    "type": "object",
                                    "required": [
                                        "d",
                                        "u",
                                        "o",
                                        "sewer",
                                        "gas"
                                    ],
                                    "properties": {
                                        "d": {
                                            "description": "edge SAID",
                                            "type": "string"
                                        },
                                        "u": {
                                            "description": "edge UUID",
                                            "type": "string"
                                        },
                                        "o": {
                                            "description": "m-ary group operator",
                                            "type": "string",
                                            "const": "OR"
                                        },
                                        "sewer": {
                                            "description": "sewer address edge",
                                            "type": "object",
                                            "required": [
                                                "d",
                                                "u",
                                                "n",
                                                "s"
                                            ],
                                            "properties": {
                                                "d": {
                                                    "description": "edge SAID",
                                                    "type": "string"
                                                },
                                                "u": {
                                                    "description": "edge UUID",
                                                    "type": "string"
                                                },
                                                "n": {
                                                    "description": "far node SAID",
                                                    "type": "string"
                                                },
                                                "s": {
                                                    "description": "far node schema SAID",
                                                    "type": "string",
                                                    "const": "EHwY1lkFrn9y2PgveY4-9XgOcLxUdYerzwLIr9Bf7V_N"
                                                }
                                            },
                                            "additionalProperties": false
                                        },
                                        "gas": {
                                            "description": "gas address edge",
                                            "type": "object",
                                            "required": [
                                                "d",
                                                "u",
                                                "n",
                                                "s"
                                            ],
                                            "properties": {
                                                "d": {
                                                    "description": "edge SAID",
                                                    "type": "string"
                                                },
                                                "u": {
                                                    "description": "edge UUID",
                                                    "type": "string"
                                                },
                                                "n": {
                                                    "description": "far node SAID",
                                                    "type": "string"
                                                },
                                                "s": {
                                                    "description": "far node schema SAID",
                                                    "type": "string",
                                                    "const": "EFrn9y2PgveY4-9XgOcLxUdYerzwLIr9Bf7V_NHwY1lk"
                                                }
                                            },
                                            "additionalProperties": false
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            }
        },
        "25": {
            "type": "json",
            "content": "{\n  \"v\":  \"ACDCCAAJSONAACD.\",\n  \"d\":  \"EBWNFJL5OuQPyM5K0neunicIXOf2BcMBdXt3gHdSXCJn\",\n  \"u\":  \"0AG7OY1wjaDAE0qHcgNghkDa\",\n  \"i\":  \"EmkPreYpZfFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPM\",\n  \"rd\": \"EMwsxUelUauaXtMxTfPAMPAI6FkekwlOjkggtymRy7x\",\n  \"s\":  \"EGGeIZ8a8FWS7a6s4reAXRZOkogZ2A46jrVPTzlSkUPq\",\n  \"a\":  \"EgveY4-9XgOcLxUderzwLIr9Bf7V_NHwY1lkFrn9y2PY\",\n  \"e\":  \"EFOLe71iheqcywJcnjtJtQIYPvAu6DZIl3MOARH3dCdo\",\n  \"r\":  \"Ee71iheqcywJcnjtJtQIYPvAu6DZIl3MORH3dCdoFOLB\"\n}",
            "data": {
                "v": "ACDCCAAJSONAACD.",
                "d": "EBWNFJL5OuQPyM5K0neunicIXOf2BcMBdXt3gHdSXCJn",
                "u": "0AG7OY1wjaDAE0qHcgNghkDa",
                "i": "EmkPreYpZfFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPM",
                "rd": "EMwsxUelUauaXtMxTfPAMPAI6FkekwlOjkggtymRy7x",
                "s": "EGGeIZ8a8FWS7a6s4reAXRZOkogZ2A46jrVPTzlSkUPq",
                "a": "EgveY4-9XgOcLxUderzwLIr9Bf7V_NHwY1lkFrn9y2PY",
                "e": "EFOLe71iheqcywJcnjtJtQIYPvAu6DZIl3MOARH3dCdo",
                "r": "Ee71iheqcywJcnjtJtQIYPvAu6DZIl3MORH3dCdoFOLB"
            },
            "basic_said": "EN9lbe7kmEoT43sqGWseA4cJcFRQoIDh85wYdKFNRinb",
            "compact_said": "EN9lbe7kmEoT43sqGWseA4cJcFRQoIDh85wYdKFNRinb"
        },
        "26": {
            "type": "json",
            "content": "{\n  \"e\":\n  {\n    \"d\": \"EFOLe71iheqcywJcnjtJtQIYPvAu6DZIl3MOARH3dCdo\",\n    \"poe\": \"ECJnFJL5OuQPyM5K0neuniccMBdXt3gIXOf2BBWNHdSX\",\n    \"poa\":\n    {\n      \"o\": \"OR\",\n      \"sewer\": \"EK0neuniccMBdXt3gIXOf2BBWNHdSXCJnFJL5OuQPyM5\",\n      \"gas\": \"EBWNHdSXCJnFJL5OuQPyM5K0neuniccMBdXt3gIXOf2B\"\n    }\n  }\n}",
            "data": {
                "e": {
                    "d": "EFOLe71iheqcywJcnjtJtQIYPvAu6DZIl3MOARH3dCdo",
                    "poe": "ECJnFJL5OuQPyM5K0neuniccMBdXt3gIXOf2BBWNHdSX",
                    "poa": {
                        "o": "OR",
                        "sewer": "EK0neuniccMBdXt3gIXOf2BBWNHdSXCJnFJL5OuQPyM5",
                        "gas": "EBWNHdSXCJnFJL5OuQPyM5K0neuniccMBdXt3gIXOf2B"
                    }
                }
            },
            "compact_said": "EJB1m8ur8RzcgaP9EGyW3aPPXjR5ybmB00D-4t70cGEh"
        },
        "27": {
            "type": "json",
            "content": "\"e\":\n{\n  \"description\": \"edge section\",\n  \"oneOf\":\n  [\n    {\n      \"description\": \"edge section SAID\",\n      \"type\": \"string\"\n    },\n    {\n      \"description\": \"edge detail\",\n      \"type\": \"object\",\n      \"required\":\n      [\n        \"d\",\n        \"poe\",\n        \"poa\"\n      ],\n      \"properties\":\n      {\n        \"d\":\n        {\n          \"description\": \"edge section SAID\",\n          \"type\": \"string\"\n        },\n        \"poe\":\n        {\n          \"description\": \"entitlement edge\",\n          \"oneOf\":\n          [\n            {\n              \"description\": \"simple compact form far node SAID\",\n              \"type\": \"string\"\n            },\n            {\n              \"description\": \"edge detail\",\n              \"type\": \"object\",\n              \"required\":\n              [\n                \"n\",\n              ],\n              \"properties\":\n              {\n                \"n\":\n                {\n                  \"description\": \"far node SAID\",\n                  \"type\": \"string\"\n                }\n              },\n              \"additionalProperties\": false\n            }\n          ]\n        },\n        \"poa\":\n        {\n          \"description\": \"proof of address group\",\n          \"type\": \"object\",\n          \"required\":\n          [\n            \"o\",\n            \"sewer\",\n            \"gas\"\n          ],\n          \"properties\":\n          {\n            \"o\":\n            {\n              \"description\": \"m-ary group operator\",\n              \"type\": \"string\",\n              \"const\": \"OR\"\n            },\n            \"sewer\":\n            {\n              \"description\": \"sewer address edge\",\n              \"oneOf\":\n              [\n                {\n                  \"description\": \"simple compact form far node SAID\",\n                  \"type\": \"string\"\n                },\n                {\n                  \"description\": \"edge detail\",\n                  \"type\": \"object\",\n                  \"required\":\n                  [\n                    \"n\",\n                  ],\n                  \"properties\":\n                  {\n                    \"n\":\n                    {\n                      \"description\": \"far node SAID\",\n                      \"type\": \"string\"\n                    }\n                  },\n                  \"additionalProperties\": false\n                }\n              ]\n            },\n            \"gas\":\n            {\n              \"description\": \"gas address edge\",\n              \"oneOf\":\n              [\n                {\n                  \"description\": \"simple compact form far node SAID\",\n                  \"type\": \"string\"\n                },\n                {\n                  \"description\": \"edge detail\",\n                  \"type\": \"object\",\n                  \"required\":\n                  [\n                    \"n\",\n                  ],\n                  \"properties\":\n                  {\n                    \"n\":\n                    {\n                      \"description\": \"far node SAID\",\n                      \"type\": \"string\"\n                    }\n                  },\n                  \"additionalProperties\": false\n                }\n              ]\n            }\n          },\n          \"additionalProperties\": false\n        },\n      },\n      \"additionalProperties\": false\n    }\n  ]\n}",
            "data": {
                "e": {
                    "description": "edge section",
                    "oneOf": [
                        {
                            "description": "edge section SAID",
                            "type": "string"
                        },
                        {
                            "description": "edge detail",
                            "type": "object",
                            "required": [
                                "d",
                                "poe",
                                "poa"
                            ],
                            "properties": {
                                "d": {
                                    "description": "edge section SAID",
                                    "type": "string"
                                },
                                "poe": {
                                    "description": "entitlement edge",
                                    "oneOf": [
                                        {
                                            "description": "simple compact form far node SAID",
                                            "type": "string"
                                        },
                                        {
                                            "description": "edge detail",
                                            "type": "object",
                                            "required": [
                                                "n"
                                            ],
                                            "properties": {
                                                "n": {
                                                    "description": "far node SAID",
                                                    "type": "string"
                                                }
                                            },
                                            "additionalProperties": false
                                        }
                                    ]
                                },
                                "poa": {
                                    "description": "proof of address group",
                                    "type": "object",
                                    "required": [
                                        "o",
                                        "sewer",
                                        "gas"
                                    ],
                                    "properties": {
                                        "o": {
                                            "description": "m-ary group operator",
                                            "type": "string",
                                            "const": "OR"
                                        },
                                        "sewer": {
                                            "description": "sewer address edge",
                                            "oneOf": [
                                                {
                                                    "description": "simple compact form far node SAID",
                                                    "type": "string"
                                                },
                                                {
                                                    "description": "edge detail",
                                                    "type": "object",
                                                    "required": [
                                                        "n"
                                                    ],
                                                    "properties": {
                                                        "n": {
                                                            "description": "far node SAID",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "additionalProperties": false
                                                }
                                            ]
                                        },
                                        "gas": {
                                            "description": "gas address edge",
                                            "oneOf": [
                                                {
                                                    "description": "simple compact form far node SAID",
                                                    "type": "string"
                                                },
                                                {
                                                    "description": "edge detail",
                                                    "type": "object",
                                                    "required": [
                                                        "n"
                                                    ],
                                                    "properties": {
                                                        "n": {
                                                            "description": "far node SAID",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "additionalProperties": false
                                                }
                                            ]
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            }
        },
        "28": {
            "type": "json",
            "content": "{\n  \"v\":  \"ACDCCAAJSONAACD.\",\n  \"d\":  \"EBWNFJL5OuQPyM5K0neunicIXOf2BcMBdXt3gHdSXCJn\",\n  \"u\":  \"0AG7OY1wjaDAE0qHcgNghkDa\",\n  \"i\":  \"EmkPreYpZfFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPM\",\n  \"rd\": \"EMwsxUelUauaXtMxTfPAMPAI6FkekwlOjkggtymRy7x\",\n  \"s\":  \"EGGeIZ8a8FWS7a6s4reAXRZOkogZ2A46jrVPTzlSkUPq\",\n  \"a\":  \"EgveY4-9XgOcLxUderzwLIr9Bf7V_NHwY1lkFrn9y2PY\",\n  \"e\":  \"EFOLe71iheqcywJcnjtJtQIYPvAu6DZIl3MOARH3dCdo\",\n  \"r\":  \"Ee71iheqcywJcnjtJtQIYPvAu6DZIl3MORH3dCdoFOLB\"\n}",
            "data": {
                "v": "ACDCCAAJSONAACD.",
                "d": "EBWNFJL5OuQPyM5K0neunicIXOf2BcMBdXt3gHdSXCJn",
                "u": "0AG7OY1wjaDAE0qHcgNghkDa",
                "i": "EmkPreYpZfFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPM",
                "rd": "EMwsxUelUauaXtMxTfPAMPAI6FkekwlOjkggtymRy7x",
                "s": "EGGeIZ8a8FWS7a6s4reAXRZOkogZ2A46jrVPTzlSkUPq",
                "a": "EgveY4-9XgOcLxUderzwLIr9Bf7V_NHwY1lkFrn9y2PY",
                "e": "EFOLe71iheqcywJcnjtJtQIYPvAu6DZIl3MOARH3dCdo",
                "r": "Ee71iheqcywJcnjtJtQIYPvAu6DZIl3MORH3dCdoFOLB"
            },
            "basic_said": "EN9lbe7kmEoT43sqGWseA4cJcFRQoIDh85wYdKFNRinb",
            "compact_said": "EN9lbe7kmEoT43sqGWseA4cJcFRQoIDh85wYdKFNRinb"
        },
        "29": {
            "type": "json",
            "content": "\"r\":\n{\n  \"d\": \"Ee71iheqcywJcnjtJtQIYPvAu6DZIl3MORH3dCdoFOLB\",\n  \"u\": \"0ADaG7OaDAE0qHcgY1Nghkwj\",\n  \"disclaimers\":\n  {\n    \"d\": \"ELIr9Bf7V_NAwY1lkFrn9y2PgveY4-9XgOcLxUdYerzw\",\n    \"u\": \"0AHcgY1NghkwjDaG7OaDAE0q\",\n    \"l\": \"The person or legal entity identified by this ACDC's Issuer AID (Issuer) makes the following disclaimers:\",\n    \"warrantyDisclaimer\":\n    {\n      \"d\": \"EBgOcLxUdYerzwLIr9Bf7V_NAwY1lkFrn9y2PgveY4-9\",\n      \"u\": \"0AG7OY1wjaDAE0qHcgNghkDa\",\n      \"l\": \"Issuer provides this ACDC on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE\"\n    },\n    \"liabilityDisclaimer\":\n    {\n      \"d\": \"ED1lkFrn9y2PgveY4-9XgOcLxUdYerzwLIr9Bf7V_NAw\",\n      \"u\": \"0AHcgNghkDaG7OY1wjaDAE0q\",\n      \"l\": \"In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall the Issuer be liable for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this credential. \"\n    }\n  },\n  \"permittedUse\":\n  {\n    \"d\": \"EEgOcLxUdYerzwLFrn9y2PgveY4-9Ir9Bf7V_NAwY1lk\",\n    \"u\": \"0ADaG7OY1wjaDAE0qHcgNghk\",\n    \"l\": \"The person or legal entity identified by the ACDC's Issuee AID (Issuee) agrees to only use the information contained in this ACDC for non-commercial purposes.\"\n  }\n}",
            "data": {
                "r": {
                    "d": "Ee71iheqcywJcnjtJtQIYPvAu6DZIl3MORH3dCdoFOLB",
                    "u": "0ADaG7OaDAE0qHcgY1Nghkwj",
                    "disclaimers": {
                        "d": "ELIr9Bf7V_NAwY1lkFrn9y2PgveY4-9XgOcLxUdYerzw",
                        "u": "0AHcgY1NghkwjDaG7OaDAE0q",
                        "l": "The person or legal entity identified by this ACDC's Issuer AID (Issuer) makes the following disclaimers:",
                        "warrantyDisclaimer": {
                            "d": "EBgOcLxUdYerzwLIr9Bf7V_NAwY1lkFrn9y2PgveY4-9",
                            "u": "0AG7OY1wjaDAE0qHcgNghkDa",
                            "l": "Issuer provides this ACDC on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE"
                        },
                        "liabilityDisclaimer": {
                            "d": "ED1lkFrn9y2PgveY4-9XgOcLxUdYerzwLIr9Bf7V_NAw",
                            "u": "0AHcgNghkDaG7OY1wjaDAE0q",
                            "l": "In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall the Issuer be liable for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this credential. "
                        }
                    },
                    "permittedUse": {
                        "d": "EEgOcLxUdYerzwLFrn9y2PgveY4-9Ir9Bf7V_NAwY1lk",
                        "u": "0ADaG7OY1wjaDAE0qHcgNghk",
                        "l": "The person or legal entity identified by the ACDC's Issuee AID (Issuee) agrees to only use the information contained in this ACDC for non-commercial purposes."
                    }
                }
            },
            "compact_said": "EPQzC5TNd7QxgqhHzFEhxcKWsUkdscOyZyiI0Ug5s7Jn",
            "full": {
                "d": "EPQzC5TNd7QxgqhHzFEhxcKWsUkdscOyZyiI0Ug5s7Jn",
                "u": "0ADaG7OaDAE0qHcgY1Nghkwj",
                "disclaimers": {
                    "d": "EJ7IY4idT9sXKZJTJpFL6CFuBamIJw_3umgmuNhGt3XT",
                    "u": "0AHcgY1NghkwjDaG7OaDAE0q",
                    "l": "The person or legal entity identified by this ACDC's Issuer AID (Issuer) makes the following disclaimers:",
                    "warrantyDisclaimer": {
                        "d": "ELH7eo4w1ZqgoIBVQ-U532r3NMiwGNPf1r8O94jD95dp",
                        "u": "0AG7OY1wjaDAE0qHcgNghkDa",
                        "l": "Issuer provides this ACDC on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE"
                    },
                    "liabilityDisclaimer": {
                        "d": "ENSFDVNwCiOvtbC5-0O3TVXIYBsBzc-E42ubDY4VFv_s",
                        "u": "0AHcgNghkDaG7OY1wjaDAE0q",
                        "l": "In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall the Issuer be liable for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this credential. "
                    }
                },
                "permittedUse": {
                    "d": "EHcyfo-H4zLgSIj4shEk-gHHBAFj5-RlKJiHxOzgxeJA",
                    "u": "0ADaG7OY1wjaDAE0qHcgNghk",
                    "l": "The person or legal entity identified by the ACDC's Issuee AID (Issuee) agrees to only use the information contained in this ACDC for non-commercial purposes."
                }
            },
            "full_path": [
                "r"
            ]
        },
        "30": {
            "type": "json",
            "content": "\"r\":\n{\n  \"d\": \"Ee71iheqcywJcnjtJtQIYPvAu6DZIl3MORH3dCdoFOLB\",\n  \"u\": \"0ADaG7OaDAE0qHcgY1Nghkwj\",\n  \"disclaimers\":\n  {\n    \"d\": \"ELIr9Bf7V_NAwY1lkFrn9y2PgveY4-9XgOcLxUdYerzw\",\n    \"u\": \"0AHcgY1NghkwjDaG7OaDAE0q\",\n    \"l\": \"The person or legal entity identified by this ACDC's Issuer AID (Issuer) makes the following disclaimers:\",\n    \"warrantyDisclaimer\": \"EBgOcLxUdYerzwLIr9Bf7V_NAwY1lkFrn9y2PgveY4-9\",\n    \"liabilityDisclaimer\": \"ED1lkFrn9y2PgveY4-9XgOcLxUdYerzwLIr9Bf7V_NAw\",\n  },\n  \"permittedUse\": \"EEgOcLxUdYerzwLFrn9y2PgveY4-9Ir9Bf7V_NAwY1lk\"\n}",
            "data": {
                "r": {
                    "d": "Ee71iheqcywJcnjtJtQIYPvAu6DZIl3MORH3dCdoFOLB",
                    "u": "0ADaG7OaDAE0qHcgY1Nghkwj",
                    "disclaimers": {
                        "d": "ELIr9Bf7V_NAwY1lkFrn9y2PgveY4-9XgOcLxUdYerzw",
                        "u": "0AHcgY1NghkwjDaG7OaDAE0q",
                        "l": "The person or legal entity identified by this ACDC's Issuer AID (Issuer) makes the following disclaimers:",
                        "warrantyDisclaimer": "EBgOcLxUdYerzwLIr9Bf7V_NAwY1lkFrn9y2PgveY4-9",
                        "liabilityDisclaimer": "ED1lkFrn9y2PgveY4-9XgOcLxUdYerzwLIr9Bf7V_NAw"
                    },
                    "permittedUse": "EEgOcLxUdYerzwLFrn9y2PgveY4-9Ir9Bf7V_NAwY1lk"
                }
            },
            "compact_said": "ENgpby18r7SgMmjTpE09MHT3XB3xGpuX3XgfpOa4aSiz",
            "full": {
                "d": "ENgpby18r7SgMmjTpE09MHT3XB3xGpuX3XgfpOa4aSiz",
                "u": "0ADaG7OaDAE0qHcgY1Nghkwj",
                "disclaimers": {
                    "d": "EC3YBy6LRb4P0rsRQm2Jwbzprp2ICBAKg7j-SEeCXVnU",
                    "u": "0AHcgY1NghkwjDaG7OaDAE0q",
                    "l": "The person or legal entity identified by this ACDC's Issuer AID (Issuer) makes the following disclaimers:",
                    "warrantyDisclaimer": "EBgOcLxUdYerzwLIr9Bf7V_NAwY1lkFrn9y2PgveY4-9",
                    "liabilityDisclaimer": "ED1lkFrn9y2PgveY4-9XgOcLxUdYerzwLIr9Bf7V_NAw"
                },
                "permittedUse": "EEgOcLxUdYerzwLFrn9y2PgveY4-9Ir9Bf7V_NAwY1lk"
            },
            "full_path": [
                "r"
            ]
        },
        "31": {
            "type": "json",
            "content": "\"r\":\n{\n  \"description\": \"rule section\",\n  \"oneOf\":\n  [\n    {\n      \"description\": \"rule section SAID\",\n      \"type\": \"string\"\n    },\n    {\n      \"description\": \"rule detail\",\n      \"type\": \"object\",\n      \"required\":\n      [\n        \"d\",\n        \"u\",\n        \"disclaimers\",\n        \"permittedUse\"\n      ],\n      \"properties\":\n      {\n        \"d\":\n        {\n          \"description\": \"rule section SAID\",\n          \"type\": \"string\"\n        },\n        \"u\":\n        {\n          \"description\": \"rule section UUID\",\n          \"type\": \"string\"\n        },\n        \"disclaimers\":\n        {\n          \"description\": \"rule group\",\n          \"type\": \"object\",\n          \"required\":\n          [\n            \"d\",\n            \"u\",\n            \"l\",\n            \"warrantyDisclaimer\",\n            \"liabilityDisclaimer\"\n          ],\n          \"properties\":\n          {\n            \"d\":\n            {\n              \"description\": \"rule group SAID\",\n              \"type\": \"string\"\n            },\n            \"u\":\n            {\n              \"description\": \"rule group UUID\",\n              \"type\": \"string\"\n            },\n            \"warrantyDisclaimer\":\n            {\n              \"description\": \"rule\",\n              \"oneOf\":\n              [\n                {\n                  \"description\": \"compact form\",\n                  \"type\": \"string\"\n                },\n                {\n                  \"description\": \"rule detail\",\n                  \"type\": \"object\",\n                  \"required\":\n                  [\n                    \"d\",\n                    \"u\",\n                    \"l\",\n                  ],\n                  \"properties\":\n                  {\n                    \"d\":\n                    {\n                      \"description\": \"rule SAID\",\n                      \"type\": \"string\"\n                    },\n                    \"u\":\n                    {\n                      \"description\": \"rule UUID\",\n                      \"type\": \"string\"\n                    },\n                    \"l\":\n                    {\n                      \"description\": \"legal language\",\n                      \"type\": \"string\"\n                    }\n                  },\n                  \"additionalProperties\": false\n                }\n              ]\n            },\n            \"liabilityDisclaimer\":\n            {\n              \"description\": \"rule\",\n              \"oneOf\":\n              [\n                {\n                  \"description\": \"compact form\",\n                  \"type\": \"string\"\n                },\n                {\n                  \"description\": \"rule detail\",\n                  \"type\": \"object\",\n                  \"required\":\n                  [\n                    \"d\",\n                    \"u\",\n                    \"l\",\n                  ],\n                  \"properties\":\n                  {\n                    \"d\":\n                    {\n                      \"description\": \"rule SAID\",\n                      \"type\": \"string\"\n                    },\n                    \"u\":\n                    {\n                      \"description\": \"rule UUID\",\n                      \"type\": \"string\"\n                    },\n                    \"l\":\n                    {\n                      \"description\": \"legal language\",\n                      \"type\": \"string\"\n                    }\n                  },\n                  \"additionalProperties\": false\n                }\n              ]\n            }\n          },\n          \"additionalProperties\": false\n        },\n        \"permittedUse\":\n        {\n          \"description\": \"rule\",\n          \"oneOf\":\n          [\n            {\n              \"description\": \"compact form\",\n              \"type\": \"string\"\n            },\n            {\n              \"description\": \"rule detail\",\n              \"type\": \"object\",\n              \"required\":\n              [\n                \"d\",\n                \"u\",\n                \"l\",\n              ],\n              \"properties\":\n              {\n                \"d\":\n                {\n                  \"description\": \"rule SAID\",\n                  \"type\": \"string\"\n                },\n                \"u\":\n                {\n                  \"description\": \"rule UUID\",\n                  \"type\": \"string\"\n                },\n                \"l\":\n                {\n                  \"description\": \"legal language\",\n                  \"type\": \"string\"\n                }\n              },\n              \"additionalProperties\": false\n            }\n          ]\n        },\n      },\n      \"additionalProperties\": false\n    }\n  ]\n}",
            "data": {
                "r": {
                    "description": "rule section",
                    "oneOf": [
                        {
                            "description": "rule section SAID",
                            "type": "string"
                        },
                        {
                            "description": "rule detail",
                            "type": "object",
                            "required": [
                                "d",
                                "u",
                                "disclaimers",
                                "permittedUse"
                            ],
                            "properties": {
                                "d": {
                                    "description": "rule section SAID",
                                    "type": "string"
                                },
                                "u": {
                                    "description": "rule section UUID",
                                    "type": "string"
                                },
                                "disclaimers": {
                                    "description": "rule group",
                                    "type": "object",
                                    "required": [
                                        "d",
                                        "u",
                                        "l",
                                        "warrantyDisclaimer",
                                        "liabilityDisclaimer"
                                    ],
                                    "properties": {
                                        "d": {
                                            "description": "rule group SAID",
                                            "type": "string"
                                        },
                                        "u": {
                                            "description": "rule group UUID",
                                            "type": "string"
                                        },
                                        "warrantyDisclaimer": {
                                            "description": "rule",
                                            "oneOf": [
                                                {
                                                    "description": "compact form",
                                                    "type": "string"
                                                },
                                                {
                                                    "description": "rule detail",
                                                    "type": "object",
                                                    "required": [
                                                        "d",
                                                        "u",
                                                        "l"
                                                    ],
                                                    "properties": {
                                                        "d": {
                                                            "description": "rule SAID",
                                                            "type": "string"
                                                        },
                                                        "u": {
                                                            "description": "rule UUID",
                                                            "type": "string"
                                                        },
                                                        "l": {
                                                            "description": "legal language",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "additionalProperties": false
                                                }
                                            ]
                                        },
                                        "liabilityDisclaimer": {
                                            "description": "rule",
                                            "oneOf": [
                                                {
                                                    "description": "compact form",
                                                    "type": "string"
                                                },
                                                {
                                                    "description": "rule detail",
                                                    "type": "object",
                                                    "required": [
                                                        "d",
                                                        "u",
                                                        "l"
                                                    ],
                                                    "properties": {
                                                        "d": {
                                                            "description": "rule SAID",
                                                            "type": "string"
                                                        },
                                                        "u": {
                                                            "description": "rule UUID",
                                                            "type": "string"
                                                        },
                                                        "l": {
                                                            "description": "legal language",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "additionalProperties": false
                                                }
                                            ]
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "permittedUse": {
                                    "description": "rule",
                                    "oneOf": [
                                        {
                                            "description": "compact form",
                                            "type": "string"
                                        },
                                        {
                                            "description": "rule detail",
                                            "type": "object",
                                            "required": [
                                                "d",
                                                "u",
                                                "l"
                                            ],
                                            "properties": {
                                                "d": {
                                                    "description": "rule SAID",
                                                    "type": "string"
                                                },
                                                "u": {
                                                    "description": "rule UUID",
                                                    "type": "string"
                                                },
                                                "l": {
                                                    "description": "legal language",
                                                    "type": "string"
                                                }
                                            },
                                            "additionalProperties": false
                                        }
                                    ]
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            }
        },
        "32": {
            "type": "json",
            "content": "{\n  \"v\":  \"ACDCCAAJSONAACD.\",\n  \"d\":  \"EBWNFJL5OuQPyM5K0neunicIXOf2BcMBdXt3gHdSXCJn\",\n  \"u\":  \"0AG7OY1wjaDAE0qHcgNghkDa\",\n  \"i\":  \"EmkPreYpZfFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPM\",\n  \"rd\": \"EMwsxUelUauaXtMxTfPAMPAI6FkekwlOjkggtymRy7x\",\n  \"s\":  \"EGGeIZ8a8FWS7a6s4reAXRZOkogZ2A46jrVPTzlSkUPq\",\n  \"a\":  \"EgveY4-9XgOcLxUderzwLIr9Bf7V_NHwY1lkFrn9y2PY\",\n  \"e\":  \"EFOLe71iheqcywJcnjtJtQIYPvAu6DZIl3MOARH3dCdo\",\n  \"r\":  \"EDZIl3MORH3dCdoFOLBe71iheqcywJcnjtJtQIYPvAu6\"\n}",
            "data": {
                "v": "ACDCCAAJSONAACD.",
                "d": "EBWNFJL5OuQPyM5K0neunicIXOf2BcMBdXt3gHdSXCJn",
                "u": "0AG7OY1wjaDAE0qHcgNghkDa",
                "i": "EmkPreYpZfFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPM",
                "rd": "EMwsxUelUauaXtMxTfPAMPAI6FkekwlOjkggtymRy7x",
                "s": "EGGeIZ8a8FWS7a6s4reAXRZOkogZ2A46jrVPTzlSkUPq",
                "a": "EgveY4-9XgOcLxUderzwLIr9Bf7V_NHwY1lkFrn9y2PY",
                "e": "EFOLe71iheqcywJcnjtJtQIYPvAu6DZIl3MOARH3dCdo",
                "r": "EDZIl3MORH3dCdoFOLBe71iheqcywJcnjtJtQIYPvAu6"
            },
            "basic_said": "EPXuQlwqyuQGGJsyoUARKvS22vECKzCDcgcMLVZbmHYn",
            "compact_said": "EPXuQlwqyuQGGJsyoUARKvS22vECKzCDcgcMLVZbmHYn"
        },
        "33": {
            "type": "json",
            "content": "\"r\":\n{\n  \"d\": \"EDZIl3MORH3dCdoFOLBe71iheqcywJcnjtJtQIYPvAu6\",\n  \"disclaimers\":\n  {\n    \"l\": \"The person or legal entity identified by this ACDC's Issuer AID (Issuer) makes the following disclaimers:\",\n    \"warrantyDisclaimer\":\n    {\n      \"l\": \"Issuer provides this ACDC on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE\"\n    },\n    \"liabilityDisclaimer\":\n    {\n      \"l\": \"In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall the Issuer be liable for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this credential. \"\n    }\n  },\n  \"permittedUse\":\n  {\n    \"l\": \"The person or legal entity identified by the ACDC's Issuee AID (Issuee) agrees to only use the information contained in this ACDC for non-commercial purposes.\"\n  }\n}",
            "data": {
                "r": {
                    "d": "EDZIl3MORH3dCdoFOLBe71iheqcywJcnjtJtQIYPvAu6",
                    "disclaimers": {
                        "l": "The person or legal entity identified by this ACDC's Issuer AID (Issuer) makes the following disclaimers:",
                        "warrantyDisclaimer": {
                            "l": "Issuer provides this ACDC on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE"
                        },
                        "liabilityDisclaimer": {
                            "l": "In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall the Issuer be liable for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this credential. "
                        }
                    },
                    "permittedUse": {
                        "l": "The person or legal entity identified by the ACDC's Issuee AID (Issuee) agrees to only use the information contained in this ACDC for non-commercial purposes."
                    }
                }
            },
            "compact_said": "EJrID11kTb66rUgSLQi3Z6eIvSn4OLH4d6z8Nh-L4GZ4"
        },
        "34": {
            "type": "json",
            "content": "\"r\":\n{\n  \"d\": \"EDZIl3MORH3dCdoFOLBe71iheqcywJcnjtJtQIYPvAu6\",\n  \"disclaimers\":\n  {\n    \"l\": \"The person or legal entity identified by this ACDC's Issuer AID (Issuer) makes the following disclaimers:\",\n    \"warrantyDisclaimer\": \"Issuer provides this ACDC on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE\",\n    \"liabilityDisclaimer\": \"In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall the Issuer be liable for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this credential. \"\n  },\n  \"permittedUse\": \"The person or legal entity identified by the ACDC's Issuee AID (Issuee) agrees to only use the information contained in this ACDC for non-commercial purposes.\"\n}",
            "data": {
                "r": {
                    "d": "EDZIl3MORH3dCdoFOLBe71iheqcywJcnjtJtQIYPvAu6",
                    "disclaimers": {
                        "l": "The person or legal entity identified by this ACDC's Issuer AID (Issuer) makes the following disclaimers:",
                        "warrantyDisclaimer": "Issuer provides this ACDC on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE",
                        "liabilityDisclaimer": "In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall the Issuer be liable for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this credential. "
                    },
                    "permittedUse": "The person or legal entity identified by the ACDC's Issuee AID (Issuee) agrees to only use the information contained in this ACDC for non-commercial purposes."
                }
            },
            "compact_said": "EIn6r4xtGs_n9NV9tcP093QFDhcVMdKVOk56tzzG4QOD"
        },
        "35": {
            "type": "json",
            "content": "\"r\":\n{\n  \"description\": \"rule section\",\n  \"oneOf\":\n  [\n    {\n      \"description\": \"rule section SAID\",\n      \"type\": \"string\"\n    },\n    {\n      \"description\": \"rule detail\",\n      \"type\": \"object\",\n      \"required\":\n      [\n        \"d\",\n        \"disclaimers\",\n        \"permittedUse\"\n      ],\n      \"properties\":\n      {\n        \"d\":\n        {\n          \"description\": \"rule section SAID\",\n          \"type\": \"string\"\n        },\n        \"disclaimers\":\n        {\n          \"description\": \"rule group\",\n          \"type\": \"object\",\n          \"required\":\n          [\n            \"l\",\n            \"warrantyDisclaimer\",\n            \"liabilityDisclaimer\"\n          ],\n          \"properties\":\n          {\n            \"warrantyDisclaimer\":\n            {\n              \"description\": \"rule\",\n              \"oneOf\":\n              [\n                {\n                  \"description\": \"simple compact form\",\n                  \"type\": \"string\"\n                },\n                {\n                  \"description\": \"rule detail\",\n                  \"type\": \"object\",\n                  \"required\":\n                  [\n                    \"l\",\n                  ],\n                  \"properties\":\n                  {\n                    \"l\":\n                    {\n                      \"description\": \"legal language\",\n                      \"type\": \"string\"\n                    }\n                  },\n                  \"additionalProperties\": false\n                }\n              ]\n            },\n            \"liabilityDisclaimer\":\n            {\n              \"description\": \"rule\",\n              \"oneOf\":\n              [\n                {\n                  \"description\": \"simple compact form\",\n                  \"type\": \"string\"\n                },\n                {\n                  \"description\": \"rule detail\",\n                  \"type\": \"object\",\n                  \"required\":\n                  [\n                    \"l\",\n                  ],\n                  \"properties\":\n                  {\n                    \"l\":\n                    {\n                      \"description\": \"legal language\",\n                      \"type\": \"string\"\n                    }\n                  },\n                  \"additionalProperties\": false\n                }\n              ]\n            }\n          },\n          \"additionalProperties\": false\n        },\n        \"permittedUse\":\n        {\n          \"description\": \"rule\",\n          \"oneOf\":\n          [\n            {\n              \"description\": \"simple compact form\",\n              \"type\": \"string\"\n            },\n            {\n              \"description\": \"rule detail\",\n              \"type\": \"object\",\n              \"required\":\n              [\n                \"l\",\n              ],\n              \"properties\":\n              {\n                \"l\":\n                {\n                  \"description\": \"legal language\",\n                  \"type\": \"string\"\n                }\n              },\n              \"additionalProperties\": false\n            }\n          ]\n        },\n      },\n      \"additionalProperties\": false\n    }\n  ]\n}",
            "data": {
                "r": {
                    "description": "rule section",
                    "oneOf": [
                        {
                            "description": "rule section SAID",
                            "type": "string"
                        },
                        {
                            "description": "rule detail",
                            "type": "object",
                            "required": [
                                "d",
                                "disclaimers",
                                "permittedUse"
                            ],
                            "properties": {
                                "d": {
                                    "description": "rule section SAID",
                                    "type": "string"
                                },
                                "disclaimers": {
                                    "description": "rule group",
                                    "type": "object",
                                    "required": [
                                        "l",
                                        "warrantyDisclaimer",
                                        "liabilityDisclaimer"
                                    ],
                                    "properties": {
                                        "warrantyDisclaimer": {
                                            "description": "rule",
                                            "oneOf": [
                                                {
                                                    "description": "simple compact form",
                                                    "type": "string"
                                                },
                                                {
                                                    "description": "rule detail",
                                                    "type": "object",
                                                    "required": [
                                                        "l"
                                                    ],
                                                    "properties": {
                                                        "l": {
                                                            "description": "legal language",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "additionalProperties": false
                                                }
                                            ]
                                        },
                                        "liabilityDisclaimer": {
                                            "description": "rule",
                                            "oneOf": [
                                                {
                                                    "description": "simple compact form",
                                                    "type": "string"
                                                },
                                                {
                                                    "description": "rule detail",
                                                    "type": "object",
                                                    "required": [
                                                        "l"
                                                    ],
                                                    "properties": {
                                                        "l": {
                                                            "description": "legal language",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "additionalProperties": false
                                                }
                                            ]
                                        }
                                    },
                                    "additionalProperties": false
                                },
                                "permittedUse": {
                                    "description": "rule",
                                    "oneOf": [
                                        {
                                            "description": "simple compact form",
                                            "type": "string"
                                        },
                                        {
                                            "description": "rule detail",
                                            "type": "object",
                                            "required": [
                                                "l"
                                            ],
                                            "properties": {
                                                "l": {
                                                    "description": "legal language",
                                                    "type": "string"
                                                }
                                            },
                                            "additionalProperties": false
                                        }
                                    ]
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                }
            }
        },
        "36": {
            "type": "json",
            "content": "{\n  \"v\":  \"ACDC10JSON00011c_\",\n  \"d\":  \"EBdXt3gIXOf2BBWNHdSXCJnFJL5OuQPyM5K0neuniccM\",\n  \"i\":  \"did:keri:EmkPreYpZfFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPM\",\n  \"s\":  \"EGGeIZ8a8FWS7a646jrVPTzlSkUPqs4reAXRZOkogZ2A\",\n  \"a\":\n  {\n    \"d\": \"EgveY4-9XgOcLxUderzwLIr9Bf7V_NHwY1lkFrn9y2PY\",\n    \"i\": \"did:keri:EpZfFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPmkPreYA\",\n    \"date\": \"2022-08-22T17:50:09.988921+00:00\",\n    \"place\": \"GoodFood Restaurant, 953 East Sheridan Ave, Cody WY 82414 USA\"\n  },\n  \"e\":\n  {\n    \"d\": \"EerzwLIr9Bf7V_NHwY1lkFrn9y2PgveY4-9XgOcLxUdY\",\n    \"other\":\n    {\n      \"d\": \"E9y2PgveY4-9XgOcLxUdYerzwLIr9Bf7V_NHwY1lkFrn\",\n      \"n\": \"EIl3MORH3dCdoFOLe71iheqcywJcnjtJtQIYPvAu6DZA\"\n    }\n  },\n  \"r\":\n  {\n    \"d\": \"EwY1lkFrn9y2PgveY4-9XgOcLxUdYerzwLIr9Bf7V_NA\",\n    \"Assimilation\":\n    {\n      \"d\": \"EXgOcLxUdYerzwLIr9Bf7V_NAwY1lkFrn9y2PgveY4-9\",\n      \"l\": \"Issuee hereby explicitly and unambiguously agrees to NOT assimilate, aggregate, correlate, or otherwise use in combination with other information available to the Issuee, the information, in whole or in part, referenced by this container or any containers recursively referenced by the edge section, for any purpose other than that expressly permitted by the Purpose clause.\"\n    },\n    \"Purpose\":\n    {\n      \"d\": \"EY1lkFrn9y2PgveY4-9XgOcLxUdYerzwLIr9Bf7V_NAw\",\n      \"l\": \"One-time admittance of Issuer by Issuee to eat at place on date as specified in Attribute section.\"\n    }\n  }\n}",
            "data": {
                "v": "ACDC10JSON00011c_",
                "d": "EBdXt3gIXOf2BBWNHdSXCJnFJL5OuQPyM5K0neuniccM",
                "i": "did:keri:EmkPreYpZfFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPM",
                "s": "EGGeIZ8a8FWS7a646jrVPTzlSkUPqs4reAXRZOkogZ2A",
                "a": {
                    "d": "EgveY4-9XgOcLxUderzwLIr9Bf7V_NHwY1lkFrn9y2PY",
                    "i": "did:keri:EpZfFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPmkPreYA",
                    "date": "2022-08-22T17:50:09.988921+00:00",
                    "place": "GoodFood Restaurant, 953 East Sheridan Ave, Cody WY 82414 USA"
                },
                "e": {
                    "d": "EerzwLIr9Bf7V_NHwY1lkFrn9y2PgveY4-9XgOcLxUdY",
                    "other": {
                        "d": "E9y2PgveY4-9XgOcLxUdYerzwLIr9Bf7V_NHwY1lkFrn",
                        "n": "EIl3MORH3dCdoFOLe71iheqcywJcnjtJtQIYPvAu6DZA"
                    }
                },
                "r": {
                    "d": "EwY1lkFrn9y2PgveY4-9XgOcLxUdYerzwLIr9Bf7V_NA",
                    "Assimilation": {
                        "d": "EXgOcLxUdYerzwLIr9Bf7V_NAwY1lkFrn9y2PgveY4-9",
                        "l": "Issuee hereby explicitly and unambiguously agrees to NOT assimilate, aggregate, correlate, or otherwise use in combination with other information available to the Issuee, the information, in whole or in part, referenced by this container or any containers recursively referenced by the edge section, for any purpose other than that expressly permitted by the Purpose clause."
                    },
                    "Purpose": {
                        "d": "EY1lkFrn9y2PgveY4-9XgOcLxUdYerzwLIr9Bf7V_NAw",
                        "l": "One-time admittance of Issuer by Issuee to eat at place on date as specified in Attribute section."
                    }
                }
            },
            "basic_said": "ED7Pa8WUvpwfdJ6AZl95_1wC4MOpWoCYhmfkatNTD7Ya",
            "compact_said": "EBtlmHmvTAaT4Fk7OOLz8Lbj0-RRk-CcuAWJqqcM8zUW",
            "full": {
                "v": "ACDC10JSON0004ed_",
                "d": "EBtlmHmvTAaT4Fk7OOLz8Lbj0-RRk-CcuAWJqqcM8zUW",
                "i": "did:keri:EmkPreYpZfFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPM",
                "s": "EGGeIZ8a8FWS7a646jrVPTzlSkUPqs4reAXRZOkogZ2A",
                "a": {
                    "d": "EAlRl3pCPbtOWUz_O4xWpEJJrsMhQwjmIwLmXtxWz-fu",
                    "i": "did:keri:EpZfFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPmkPreYA",
                    "date": "2022-08-22T17:50:09.988921+00:00",
                    "place": "GoodFood Restaurant, 953 East Sheridan Ave, Cody WY 82414 USA"
                },
                "e": {
                    "d": "ELklZ5xoxJV9w2mEantpo58a76OMp5Cby2S0gk2gU41F",
                    "other": {
                        "d": "ENZyhiv9penkbqBqblRpBYTznwf3h84uHh93s_e77A7t",
                        "n": "EIl3MORH3dCdoFOLe71iheqcywJcnjtJtQIYPvAu6DZA"
                    }
                },
                "r": {
                    "d": "EGP6QI5LL1X9unCUymIwtQRjp9p4r_loUgKdymVpn_VG",
                    "Assimilation": {
                        "d": "EBRRwxQlC6b57S_7mnH-p51N3lUcgO8AAcQrgl_FTuPo",
                        "l": "Issuee hereby explicitly and unambiguously agrees to NOT assimilate, aggregate, correlate, or otherwise use in combination with other information available to the Issuee, the information, in whole or in part, referenced by this container or any containers recursively referenced by the edge section, for any purpose other than that expressly permitted by the Purpose clause."
                    },
                    "Purpose": {
                        "d": "EOF9OZMZudCRFDU_AmJWY7Py3KdazRsGnbEz-QIQ7HJj",
                        "l": "One-time admittance of Issuer by Issuee to eat at place on date as specified in Attribute section."
                    }
                }
            },
            "full_path": []
        },
        "37": {
            "type": "json",
            "content": "{\n \"s\": \"3\",\n \"d\": \"ELvaU6Z-i0d8JJR2nmwyYAZAoTNZH3UfSVPzhzS6b5CM\"\n}",
            "data": {
                "s": "3",
                "d": "ELvaU6Z-i0d8JJR2nmwyYAZAoTNZH3UfSVPzhzS6b5CM"
            },
            "basic_said": "EFti16MOBPxHHyabACx19-mJcKYQtyLl3uPMTXHDrzaq",
            "compact_said": "EFti16MOBPxHHyabACx19-mJcKYQtyLl3uPMTXHDrzaq"
        },
        "38": {
            "type": "json",
            "content": "{\n \"v\": \"ACDCCAAJSONAACQ.\",\n \"t\": \"rip\",\n \"d\": \"ENoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9Fp\",\n \"u\": \"0AHcgNghkDaG7OY1wjaDAE0q\",\n \"i\": \"ECJp2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9FpNoRx\",\n \"s\": \"0\",\n \"dt\": \"2024-05-27T19:16:50.750302+00:00\"\n}",
            "data": {
                "v": "ACDCCAAJSONAACQ.",
                "t": "rip",
                "d": "ENoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9Fp",
                "u": "0AHcgNghkDaG7OY1wjaDAE0q",
                "i": "ECJp2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9FpNoRx",
                "s": "0",
                "dt": "2024-05-27T19:16:50.750302+00:00"
            },
            "basic_said": "ECDaPcsp7dxWA9qzE1d659CWn8w6BticlV6_GHvkeo-o",
            "compact_said": "ECDaPcsp7dxWA9qzE1d659CWn8w6BticlV6_GHvkeo-o"
        },
        "39": {
            "type": "json",
            "content": "{\n \"v\": \"ACDCCAAJSONAACQ.\",\n \"t\": \"upd\",\n \"d\": \"EIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9FpNoRxCJp2w\",\n \"r\": \"ENoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9Fp\",\n \"s\": \"1\",\n \"p\": \"ENoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9Fp\",\n \"dt\": \"2024-06-01T05:01:42.660407+00:00\",\n \"a\": \"EK9FpNoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-\"\n}",
            "data": {
                "v": "ACDCCAAJSONAACQ.",
                "t": "upd",
                "d": "EIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9FpNoRxCJp2w",
                "r": "ENoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9Fp",
                "s": "1",
                "p": "ENoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9Fp",
                "dt": "2024-06-01T05:01:42.660407+00:00",
                "a": "EK9FpNoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-"
            },
            "basic_said": "ELiKlVlEknZ_0l8CgOuey-jLT9ucdv1s9Jr7JR0Y-cMQ",
            "compact_said": "ELiKlVlEknZ_0l8CgOuey-jLT9ucdv1s9Jr7JR0Y-cMQ"
        },
        "40": {
            "type": "json",
            "content": "{\n \"d\": \"EHwzy-K9FpNoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06Uec\",\n \"u\": \"ZHwzy-K9FpNoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06Uec\",\n \"ts\": \"\"\n}",
            "data": {
                "d": "EHwzy-K9FpNoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06Uec",
                "u": "ZHwzy-K9FpNoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06Uec",
                "ts": ""
            },
            "basic_said": "EA2ZMuQz7ve9BB0EQzOtPGcrjLWypt48LkvUIDKasZde",
            "compact_said": "EA2ZMuQz7ve9BB0EQzOtPGcrjLWypt48LkvUIDKasZde"
        },
        "41": {
            "type": "json",
            "content": "{\n \"v\": \"ACDCCAAJSONAACQ.\",\n \"t\": \"upd\",\n \"d\": \"EHwzy-K9FpNoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06Uec\",\n \"r\": \"ENoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9Fp\",\n \"s\": \"5\",\n \"p\": \"EIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9FpNoRxCJp2w\",\n \"dt\": \"2024-06-01T05:01:42.660407+00:00\",\n \"a\": \"EK9FpNoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-\"\n}",
            "data": {
                "v": "ACDCCAAJSONAACQ.",
                "t": "upd",
                "d": "EHwzy-K9FpNoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06Uec",
                "r": "ENoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9Fp",
                "s": "5",
                "p": "EIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9FpNoRxCJp2w",
                "dt": "2024-06-01T05:01:42.660407+00:00",
                "a": "EK9FpNoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-"
            },
            "basic_said": "ENTbUkYCXRUM1ipIGNBcKWvGwx0CxtYXsCRAeB7n67yB",
            "compact_said": "ENTbUkYCXRUM1ipIGNBcKWvGwx0CxtYXsCRAeB7n67yB"
        },
        "42": {
            "type": "json",
            "content": "{\n \"d\": \"EK9FpNoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-\",\n \"u\": \"ZIZ1H4zpq06UecHwzy-K9FpNoRxCJp2wIGM9u2Edk-PL\",\n \"ts\": \"issued\"\n}",
            "data": {
                "d": "EK9FpNoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-",
                "u": "ZIZ1H4zpq06UecHwzy-K9FpNoRxCJp2wIGM9u2Edk-PL",
                "ts": "issued"
            },
            "basic_said": "ENb-P6rnddTxPlhMBB6dyt20KUDTOOCSCCsyiYF9p7M6",
            "compact_said": "ENb-P6rnddTxPlhMBB6dyt20KUDTOOCSCCsyiYF9p7M6"
        },
        "43": {
            "type": "json",
            "content": "{\n \"v\": \"ACDCCAAJSONAACQ.\",\n \"t\": \"upd\",\n \"d\": \"EB2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9FpNoRxCJ\",\n \"r\": \"ENoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9Fp\",\n \"s\": \"9\",\n \"p\": \"EHwzy-K9FpNoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06Uec\",\n \"dt\": \"2024-07-04T05:01:42.660407+00:00\",\n \"a\": \"EGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9FpNoRxCJp2wI\"\n}",
            "data": {
                "v": "ACDCCAAJSONAACQ.",
                "t": "upd",
                "d": "EB2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9FpNoRxCJ",
                "r": "ENoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9Fp",
                "s": "9",
                "p": "EHwzy-K9FpNoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06Uec",
                "dt": "2024-07-04T05:01:42.660407+00:00",
                "a": "EGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9FpNoRxCJp2wI"
            },
            "basic_said": "EA4NL25G7AK484ZeBhvrt944syJxmA5cmaSda6WDZ8xc",
            "compact_said": "EA4NL25G7AK484ZeBhvrt944syJxmA5cmaSda6WDZ8xc"
        },
        "44": {
            "type": "json",
            "content": "{\n \"d\": \"EGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9FpNoRxCJp2wI\",\n \"u\": \"ZNoRxCJp2wIGM9u2Edk-PLIZ1H4zpq06UecHwzy-K9Fp\",\n \"ts\": \"revoked\"\n}",
            "data": {
                "d": "EGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9FpNoRxCJp2wI",
                "u": "ZNoRxCJp2wIGM9u2Edk-PLIZ1H4zpq06UecHwzy-K9Fp",
                "ts": "revoked"
            },
            "basic_said": "EIW-yEJ4jPL59arnpiQm5MULh4qSLNIctvGf4atN6-_P",
            "compact_said": "EIW-yEJ4jPL59arnpiQm5MULh4qSLNIctvGf4atN6-_P"
        },
        "45": {
            "type": "json",
            "content": "{\n \"v\": \"ACDCCAAJSONAACQ.\",\n \"t\": \"rip\",\n \"d\": \"ENoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9Fp\",\n \"u\": \"0AHcgNghkDaG7OY1wjaDAE0q\",\n \"i\": \"ECJp2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9FpNoRx\",\n \"s\": \"0\",\n \"dt\": \"2024-05-27T19:16:50.750302+00:00\"\n}",
            "data": {
                "v": "ACDCCAAJSONAACQ.",
                "t": "rip",
                "d": "ENoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9Fp",
                "u": "0AHcgNghkDaG7OY1wjaDAE0q",
                "i": "ECJp2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9FpNoRx",
                "s": "0",
                "dt": "2024-05-27T19:16:50.750302+00:00"
            },
            "basic_said": "ECDaPcsp7dxWA9qzE1d659CWn8w6BticlV6_GHvkeo-o",
            "compact_said": "ECDaPcsp7dxWA9qzE1d659CWn8w6BticlV6_GHvkeo-o"
        },
        "46": {
            "type": "json",
            "content": "{\n \"v\": \"ACDCCAAJSONAACQ.\",\n \"t\": \"upd\",\n \"d\": \"EIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9FpNoRxCJp2w\",\n \"r\": \"ENoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9Fp\",\n \"s\": \"1\",\n \"p\": \"ENoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9Fp\",\n \"dt\": \"2024-06-01T05:01:42.660407+00:00\",\n \"a\": \"EK9FpNoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-\"\n}",
            "data": {
                "v": "ACDCCAAJSONAACQ.",
                "t": "upd",
                "d": "EIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9FpNoRxCJp2w",
                "r": "ENoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9Fp",
                "s": "1",
                "p": "ENoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9Fp",
                "dt": "2024-06-01T05:01:42.660407+00:00",
                "a": "EK9FpNoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-"
            },
            "basic_said": "ELiKlVlEknZ_0l8CgOuey-jLT9ucdv1s9Jr7JR0Y-cMQ",
            "compact_said": "ELiKlVlEknZ_0l8CgOuey-jLT9ucdv1s9Jr7JR0Y-cMQ"
        },
        "47": {
            "type": "json",
            "content": "{\n \"d\": \"EHwzy-K9FpNoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06Uec\",\n \"ts\": \"issued\"\n}",
            "data": {
                "d": "EHwzy-K9FpNoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06Uec",
                "ts": "issued"
            },
            "basic_said": "ECo79jnQfYUsCtALJ1qsaEooWG-b9Dmlf_hHYBlsYCzA",
            "compact_said": "ECo79jnQfYUsCtALJ1qsaEooWG-b9Dmlf_hHYBlsYCzA"
        },
        "48": {
            "type": "json",
            "content": "{\n \"v\": \"ACDCCAAJSONAACQ.\",\n \"t\": \"upd\",\n \"d\": \"EB2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9FpNoRxCJ\",\n \"r\": \"ENoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9Fp\",\n \"s\": \"2\",\n \"p\": \"EHwzy-K9FpNoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06Uec\",\n \"dt\": \"2024-07-04T05:01:42.660407+00:00\",\n \"a\": \"EGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9FpNoRxCJp2wI\"\n}",
            "data": {
                "v": "ACDCCAAJSONAACQ.",
                "t": "upd",
                "d": "EB2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9FpNoRxCJ",
                "r": "ENoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9Fp",
                "s": "2",
                "p": "EHwzy-K9FpNoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06Uec",
                "dt": "2024-07-04T05:01:42.660407+00:00",
                "a": "EGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9FpNoRxCJp2wI"
            },
            "basic_said": "EKblUbevBoJcPXQM9KuPqO3UeWYw0Y3wfODGSxm-l6Wd",
            "compact_said": "EKblUbevBoJcPXQM9KuPqO3UeWYw0Y3wfODGSxm-l6Wd"
        },
        "49": {
            "type": "json",
            "content": "{\n \"d\": \"EGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9FpNoRxCJp2wI\",\n \"ts\": \"revoked\"\n}",
            "data": {
                "d": "EGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9FpNoRxCJp2wI",
                "ts": "revoked"
            },
            "basic_said": "EMatfeEGp8J2eg_Wqc2j9eZtJeOF0If_-V5E-FdJeCC_",
            "compact_said": "EMatfeEGp8J2eg_Wqc2j9eZtJeOF0If_-V5E-FdJeCC_"
        },
        "50": {
            "type": "json",
            "content": "{\n \"v\": \"ACDCCAAJSONAACQ.\",\n \"t\": \"rip\",\n \"d\": \"ENoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9Fp\",\n \"u\": \"0AHcgNghkDaG7OY1wjaDAE0q\",\n \"i\": \"ECJp2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9FpNoRx\",\n \"s\": \"0\",\n \"dt\": \"2024-05-27T19:16:50.750302+00:00\"\n}",
            "data": {
                "v": "ACDCCAAJSONAACQ.",
                "t": "rip",
                "d": "ENoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9Fp",
                "u": "0AHcgNghkDaG7OY1wjaDAE0q",
                "i": "ECJp2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9FpNoRx",
                "s": "0",
                "dt": "2024-05-27T19:16:50.750302+00:00"
            },
            "basic_said": "ECDaPcsp7dxWA9qzE1d659CWn8w6BticlV6_GHvkeo-o",
            "compact_said": "ECDaPcsp7dxWA9qzE1d659CWn8w6BticlV6_GHvkeo-o"
        },
        "51": {
            "type": "json",
            "content": "{\n \"v\": \"ACDCCAAJSONAACQ.\",\n \"t\": \"upd\",\n \"d\": \"EIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9FpNoRxCJp2w\",\n \"r\": \"ENoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9Fp\",\n \"s\": \"1\",\n \"p\": \"ENoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9Fp\",\n \"dt\": \"2024-06-01T05:01:42.660407+00:00\",\n \"a\": \n {\n   \"ts\": \"issued\"\n }\n}",
            "data": {
                "v": "ACDCCAAJSONAACQ.",
                "t": "upd",
                "d": "EIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9FpNoRxCJp2w",
                "r": "ENoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9Fp",
                "s": "1",
                "p": "ENoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9Fp",
                "dt": "2024-06-01T05:01:42.660407+00:00",
                "a": {
                    "ts": "issued"
                }
            },
            "basic_said": "EDmdjvS3Jl1hJc7HFhiMENmXjGO1HcMpGDmukb6YOX-Q",
            "compact_said": "EDmdjvS3Jl1hJc7HFhiMENmXjGO1HcMpGDmukb6YOX-Q"
        },
        "52": {
            "type": "json",
            "content": "{\n \"v\": \"ACDCCAAJSONAACQ.\",\n \"t\": \"upd\",\n \"d\": \"EB2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9FpNoRxCJ\",\n \"r\": \"ENoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9Fp\",\n \"s\": \"2\",\n \"p\": \"EHwzy-K9FpNoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06Uec\",\n \"dt\": \"2024-07-04T05:01:42.660407+00:00\",\n \"a\": \n {\n   \"ts\": \"revoked\"\n }\n}",
            "data": {
                "v": "ACDCCAAJSONAACQ.",
                "t": "upd",
                "d": "EB2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9FpNoRxCJ",
                "r": "ENoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06UecHwzy-K9Fp",
                "s": "2",
                "p": "EHwzy-K9FpNoRxCJp2wIGM9u2Edk-PLMZ1H4zpq06Uec",
                "dt": "2024-07-04T05:01:42.660407+00:00",
                "a": {
                    "ts": "revoked"
                }
            },
            "basic_said": "EB6vdUE0Tm-VFTo_uLRpQyAPpedwVvR0IJiGdNUXBch4",
            "compact_said": "EB6vdUE0Tm-VFTo_uLRpQyAPpedwVvR0IJiGdNUXBch4"
        },
        "53": {
            "type": "json",
            "content": "{\n  \"A\":\n  [\n    {\n      \"d\": \"ELIr9Bf7V_NHwY1lkgveY4-Frn9y2PY9XgOcLxUderzw\",\n      \"u\": \"0AG7OY1wjaDAE0qHcgNghkDa\",\n      \"score\": 96\n    },\n    {\n      \"d\": \"E9XgOcLxUderzwLIr9Bf7V_NHwY1lkFrn9y2PYgveY4-\",\n      \"u\": \"0AghkDaG7OY1wjaDAE0qHcgN\",\n      \"name\": \"Jane Doe\"\n    }\n  ]\n}",
            "data": {
                "A": [
                    {
                        "d": "ELIr9Bf7V_NHwY1lkgveY4-Frn9y2PY9XgOcLxUderzw",
                        "u": "0AG7OY1wjaDAE0qHcgNghkDa",
                        "score": 96
                    },
                    {
                        "d": "E9XgOcLxUderzwLIr9Bf7V_NHwY1lkFrn9y2PYgveY4-",
                        "u": "0AghkDaG7OY1wjaDAE0qHcgN",
                        "name": "Jane Doe"
                    }
                ]
            },
            "compact_said": "EKS-7gXcmN5saAl6qYw1eZvfzEJnKEgbI89RLYLtMxsr"
        },
        "54": {
            "type": "json",
            "content": "{\n  \"A\":\n  [\n    {\n      \"d\": \"ErzwLIr9Bf7V_NHwY1lkFrn9y2PYgveY4-9XgOcLxUde\",\n      \"u\": \"0AqHcgNghkDaG7OY1wjaDAE0\",\n      \"i\": \"did:keri:EpZfFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPmkPreYA\"\n    },\n    {\n      \"d\": \"ELIr9Bf7V_NHwY1lkgveY4-Frn9y2PY9XgOcLxUderzw\",\n      \"u\": \"0AG7OY1wjaDAE0qHcgNghkDa\",\n      \"score\": 96\n    },\n    {\n      \"d\": \"E9XgOcLxUderzwLIr9Bf7V_NHwY1lkFrn9y2PYgveY4-\",\n      \"u\": \"0AghkDaG7OY1wjaDAE0qHcgN\",\n      \"name\": \"Jane Doe\"\n    }\n  ]\n}",
            "data": {
                "A": [
                    {
                        "d": "ErzwLIr9Bf7V_NHwY1lkFrn9y2PYgveY4-9XgOcLxUde",
                        "u": "0AqHcgNghkDaG7OY1wjaDAE0",
                        "i": "did:keri:EpZfFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPmkPreYA"
                    },
                    {
                        "d": "ELIr9Bf7V_NHwY1lkgveY4-Frn9y2PY9XgOcLxUderzw",
                        "u": "0AG7OY1wjaDAE0qHcgNghkDa",
                        "score": 96
                    },
                    {
                        "d": "E9XgOcLxUderzwLIr9Bf7V_NHwY1lkFrn9y2PYgveY4-",
                        "u": "0AghkDaG7OY1wjaDAE0qHcgN",
                        "name": "Jane Doe"
                    }
                ]
            },
            "compact_said": "EC9mAmY9RI140l3CX_6EK6aDl5lXns6TM65Ho00pM4nm"
        },
        "55": {
            "type": "json",
            "content": "{\n  \"A\":\n  {\n    \"description\": \"selectively disclosable attribute aggregate section\",\n    \"oneOf\":\n    [\n      {\n        \"description\": \"attribute aggregate\",\n        \"type\": \"string\"\n      },\n      {\n        \"description\": \"selectively disclosable attribute details\",\n        \"type\": \"array\",\n        \"uniqueItems\": true,\n        \"items\":\n        {\n          \"anyOf\":\n          [\n            {\n              \"description\": \"issuer attribute\",\n              \"type\": \"object\",\n              \"required\":\n              [\n                \"d\",\n                \"u\",\n                \"i\"\n              ],\n              \"properties\":\n              {\n                \"d\":\n                {\n                  \"description\": \"attribute SAID\",\n                  \"type\": \"string\"\n                },\n                \"u\":\n                {\n                  \"description\": \"attribute UUID\",\n                  \"type\": \"string\"\n                },\n                \"i\":\n                {\n                  \"description\": \"issuer SAID\",\n                  \"type\": \"string\"\n                }\n              },\n              \"additionalProperties\": false\n            },\n            {\n              \"description\": \"score attribute\",\n              \"type\": \"object\",\n              \"required\":\n              [\n                \"d\",\n                \"u\",\n                \"score\"\n              ],\n              \"properties\":\n              {\n                \"d\":\n                {\n                  \"description\": \"attribute SAID\",\n                  \"type\": \"string\"\n                },\n                \"u\":\n                {\n                  \"description\": \"attribute UUID\",\n                  \"type\": \"string\"\n                },\n                \"score\":\n                {\n                  \"description\": \"score value\",\n                  \"type\": \"integer\"\n                }\n              },\n              \"additionalProperties\": false\n            },\n            {\n              \"description\": \"name attribute\",\n              \"type\": \"object\",\n              \"required\":\n              [\n                \"d\",\n                \"u\",\n                \"name\"\n              ],\n              \"properties\":\n              {\n                \"d\":\n                {\n                  \"description\": \"attribute SAID\",\n                  \"type\": \"string\"\n                },\n                \"u\":\n                {\n                  \"description\": \"attribute UUID\",\n                  \"type\": \"string\"\n                },\n                \"name\":\n                {\n                  \"description\": \"name value\",\n                  \"type\": \"string\"\n                }\n              },\n              \"additionalProperties\": false\n            }\n          ]\n        }\n      }\n    ],\n    \"additionalProperties\": false\n  }\n}",
            "data": {
                "A": {
                    "description": "selectively disclosable attribute aggregate section",
                    "oneOf": [
                        {
                            "description": "attribute aggregate",
                            "type": "string"
                        },
                        {
                            "description": "selectively disclosable attribute details",
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "anyOf": [
                                    {
                                        "description": "issuer attribute",
                                        "type": "object",
                                        "required": [
                                            "d",
                                            "u",
                                            "i"
                                        ],
                                        "properties": {
                                            "d": {
                                                "description": "attribute SAID",
                                                "type": "string"
                                            },
                                            "u": {
                                                "description": "attribute UUID",
                                                "type": "string"
                                            },
                                            "i": {
                                                "description": "issuer SAID",
                                                "type": "string"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    {
                                        "description": "score attribute",
                                        "type": "object",
                                        "required": [
                                            "d",
                                            "u",
                                            "score"
                                        ],
                                        "properties": {
                                            "d": {
                                                "description": "attribute SAID",
                                                "type": "string"
                                            },
                                            "u": {
                                                "description": "attribute UUID",
                                                "type": "string"
                                            },
                                            "score": {
                                                "description": "score value",
                                                "type": "integer"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    {
                                        "description": "name attribute",
                                        "type": "object",
                                        "required": [
                                            "d",
                                            "u",
                                            "name"
                                        ],
                                        "properties": {
                                            "d": {
                                                "description": "attribute SAID",
                                                "type": "string"
                                            },
                                            "u": {
                                                "description": "attribute UUID",
                                                "type": "string"
                                            },
                                            "name": {
                                                "description": "name value",
                                                "type": "string"
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                ]
                            }
                        }
                    ],
                    "additionalProperties": false
                }
            }
        },
        "56": {
            "type": "python",
            "content": "{\n  \"v\":  \"ACDCCAAJSONAACD.\",\n  \"t\":  \"acd\",\n  \"d\":  \"EBWNHdSXCJnFJL5OuQPyM5K0neuniccMBdXt3gIXOf2B\",\n  \"u\":  \"0AHcgNghkDaG7OY1wjaDAE0q\",\n  \"i\":  \"EAqjsKFk66jpf3uFv7An2EDIPMvklXKhmkPreYpZfzBr\",\n  \"rd\": \"EMwsxUelUauaXtMxTfPAMPAI6FkekwlOjkggtymRy7x\",\n  \"s\":  \"EAXRZOkogZ2A46jrVPTzlSkUPqGGeIZ8a8FWS7a6s4re\",\n  \"a\":  \"EFrn9y2PYgveY4-9XgOcLxUderzwLIr9Bf7V_NHwY1lk\",\n  \"e\":  \"ECdoFOLe71iheqcywJcnjtJtQIYPvAu6DZIl3MOARH3d\",\n  \"r\":  \"EH3dCdoFOLBe71iheqcywJcnjtJtQIYPvAu6DZIl3MOR\"\n}",
            "data": {
                "v": "ACDCCAAJSONAACD.",
                "t": "acd",
                "d": "EBWNHdSXCJnFJL5OuQPyM5K0neuniccMBdXt3gIXOf2B",
                "u": "0AHcgNghkDaG7OY1wjaDAE0q",
                "i": "EAqjsKFk66jpf3uFv7An2EDIPMvklXKhmkPreYpZfzBr",
                "rd": "EMwsxUelUauaXtMxTfPAMPAI6FkekwlOjkggtymRy7x",
                "s": "EAXRZOkogZ2A46jrVPTzlSkUPqGGeIZ8a8FWS7a6s4re",
                "a": "EFrn9y2PYgveY4-9XgOcLxUderzwLIr9Bf7V_NHwY1lk",
                "e": "ECdoFOLe71iheqcywJcnjtJtQIYPvAu6DZIl3MOARH3d",
                "r": "EH3dCdoFOLBe71iheqcywJcnjtJtQIYPvAu6DZIl3MOR"
            },
            "basic_said": "EBlaKMBDTOS2TpkC5lXXTizcVsm_OxpEwtADbh1bpfbW",
            "compact_said": "EBlaKMBDTOS2TpkC5lXXTizcVsm_OxpEwtADbh1bpfbW"
        },
        "57": {
            "type": "json",
            "content": "{\n  \"v\":  \"ACDCCAAJSONAACD.\",\n  \"t\":  \"acd\",\n  \"d\":  \"EBWNHdSXCJnFJL5OuQPyM5K0neuniccMBdXt3gIXOf2B\",\n  \"u\":  \"0AHcgNghkDaG7OY1wjaDAE0q\",\n  \"i\":  \"EAqjsKFk66jpf3uFv7An2EDIPMvklXKhmkPreYpZfzBr\",\n  \"rd\": \"EMwsxUelUauaXtMxTfPAMPAI6FkekwlOjkggtymRy7x\",\n  \"s\":  \"EBdXt3gIXOf2BBWNHdSXCJnFJL5OuQPyM5K0neuniccM\",\n  \"a\":  \"EFrn9y2PYgveY4-9XgOcLxUderzwLIr9Bf7V_NHwY1lk\",\n  \"e\":  \"ECdoFOLe71iheqcywJcnjtJtQIYPvAu6DZIl3MOARH3d\",\n  \"r\":  \"EH3dCdoFOLBe71iheqcywJcnjtJtQIYPvAu6DZIl3MOR\"\n}",
            "data": {
                "v": "ACDCCAAJSONAACD.",
                "t": "acd",
                "d": "EBWNHdSXCJnFJL5OuQPyM5K0neuniccMBdXt3gIXOf2B",
                "u": "0AHcgNghkDaG7OY1wjaDAE0q",
                "i": "EAqjsKFk66jpf3uFv7An2EDIPMvklXKhmkPreYpZfzBr",
                "rd": "EMwsxUelUauaXtMxTfPAMPAI6FkekwlOjkggtymRy7x",
                "s": "EBdXt3gIXOf2BBWNHdSXCJnFJL5OuQPyM5K0neuniccM",
                "a": "EFrn9y2PYgveY4-9XgOcLxUderzwLIr9Bf7V_NHwY1lk",
                "e": "ECdoFOLe71iheqcywJcnjtJtQIYPvAu6DZIl3MOARH3d",
                "r": "EH3dCdoFOLBe71iheqcywJcnjtJtQIYPvAu6DZIl3MOR"
            },
            "basic_said": "EAmAClNS8NN9a_J1CDIuaxjYWsmABRQVVHWV6QmqYZQo",
            "compact_said": "EAmAClNS8NN9a_J1CDIuaxjYWsmABRQVVHWV6QmqYZQo"
        },
        "58": {
            "type": "json",
            "content": "{\n  \"v\":  \"ACDCCAAJSONAACD.\",\n  \"t\":  \"acd\",\n  \"d\":  \"EBWNHdSXCJnFJL5OuQPyM5K0neuniccMBdXt3gIXOf2B\",\n  \"u\":  \"0AHcgNghkDaG7OY1wjaDAE0q\",\n  \"i\":  \"EAqjsKFk66jpf3uFv7An2EDIPMvklXKhmkPreYpZfzBr\",\n  \"rd\": \"EAMPAI6FkekwlOjkggtymRy7xMwsxUelUauaXtMxTfP\",\n  \"s\":  \"EAXRZOkogZ2A46jrVPTzlSkUPqGGeIZ8a8FWS7a6s4re\",\n  \"A\":  \"ELIr9Bf7V_NHwY1lkFrn9y2PYgveY4-9XgOcLxUderzw\",\n  \"e\":  \"ECdoFOLe71iheqcywJcnjtJtQIYPvAu6DZIl3MOARH3d\",\n  \"r\":  \"EH3dCdoFOLBe71iheqcywJcnjtJtQIYPvAu6DZIl3MOR\"\n}",
            "data": {
                "v": "ACDCCAAJSONAACD.",
                "t": "acd",
                "d": "EBWNHdSXCJnFJL5OuQPyM5K0neuniccMBdXt3gIXOf2B",
                "u": "0AHcgNghkDaG7OY1wjaDAE0q",
                "i": "EAqjsKFk66jpf3uFv7An2EDIPMvklXKhmkPreYpZfzBr",
                "rd": "EAMPAI6FkekwlOjkggtymRy7xMwsxUelUauaXtMxTfP",
                "s": "EAXRZOkogZ2A46jrVPTzlSkUPqGGeIZ8a8FWS7a6s4re",
                "A": "ELIr9Bf7V_NHwY1lkFrn9y2PYgveY4-9XgOcLxUderzw",
                "e": "ECdoFOLe71iheqcywJcnjtJtQIYPvAu6DZIl3MOARH3d",
                "r": "EH3dCdoFOLBe71iheqcywJcnjtJtQIYPvAu6DZIl3MOR"
            },
            "basic_said": "EDEGVA9dGoUnERRqCJsZ8cJvec32WlN_AzJ3xsXUh5ab",
            "compact_said": "EDEGVA9dGoUnERRqCJsZ8cJvec32WlN_AzJ3xsXUh5ab"
        },
        "59": {
            "type": "json",
            "content": "{\n  \"v\": \"ACDCCAAJSONAACD.\",\n  \"t\": \"sch\", \n  \"d\":  \"EBWNHdSXCJnFJL5OuQPyM5K0neuniccMBdXt3gIXOf2B\",\n  \"s\": \n  {\n    \"$id\": \"EBdXt3gIXOf2BBWNHdSXCJnFJL5OuQPyM5K0neuniccM\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"title\": \"Compact Public ACDC\",\n    \"description\": \"Example JSON Schema for a Compact private ACDC.\",\n    \"credentialType\": \"CompactPublicACDCExample\",\n    \"version\": \"1.0.0\",\n    \"type\": \"object\",\n    \"required\":\n    [\n      \"v\",\n      \"d\",\n      \"i\",\n      \"rd\",\n      \"s\",\n      \"a\",\n      \"e\",\n      \"r\"\n    ],\n    \"properties\":\n    {\n      \"v\":\n      {\n        \"description\": \"ACDC version string\",\n        \"type\": \"string\"\n      },\n      \"d\":\n      {\n        \"description\": \"ACDC SAID\",\n        \"type\": \"string\"\n      },\n      \"i\":\n      {\n        \"description\": \"Issuer AID\",\n        \"type\": \"string\"\n      },\n      \"rd\":\n      {\n        \"description\": \"Registry SAID\",\n        \"type\": \"string\"\n      },\n      \"s\": \n      {\n        \"description\": \"schema SAID\",\n        \"type\": \"string\"\n      },\n      \"a\": \n      {\n        \"description\": \"attribute SAID\",\n        \"type\": \"string\"\n      },\n      \"e\": \n      {\n        \"description\": \"edge SAID\",\n        \"type\": \"string\"\n      },\n      \"r\": \n      {\n        \"description\": \"rule SAID\",\n        \"type\": \"string\"\n      }\n    },\n    \"additionalProperties\": false\n  }\n}",
            "data": {
                "v": "ACDCCAAJSONAACD.",
                "t": "sch",
                "d": "EBWNHdSXCJnFJL5OuQPyM5K0neuniccMBdXt3gIXOf2B",
                "s": {
                    "$id": "EBdXt3gIXOf2BBWNHdSXCJnFJL5OuQPyM5K0neuniccM",
                    "$schema": "https://json-schema.org/draft/2020-12/schema",
                    "title": "Compact Public ACDC",
                    "description": "Example JSON Schema for a Compact private ACDC.",
                    "credentialType": "CompactPublicACDCExample",
                    "version": "1.0.0",
                    "type": "object",
                    "required": [
                        "v",
                        "d",
                        "i",
                        "rd",
                        "s",
                        "a",
                        "e",
                        "r"
                    ],
                    "properties": {
                        "v": {
                            "description": "ACDC version string",
                            "type": "string"
                        },
                        "d": {
                            "description": "ACDC SAID",
                            "type": "string"
                        },
                        "i": {
                            "description": "Issuer AID",
                            "type": "string"
                        },
                        "rd": {
                            "description": "Registry SAID",
                            "type": "string"
                        },
                        "s": {
                            "description": "schema SAID",
                            "type": "string"
                        },
                        "a": {
                            "description": "attribute SAID",
                            "type": "string"
                        },
                        "e": {
                            "description": "edge SAID",
                            "type": "string"
                        },
                        "r": {
                            "description": "rule SAID",
                            "type": "string"
                        }
                    },
                    "additionalProperties": false
                }
            }
        },
        "60": {
            "type": "json",
            "content": "{\n  \"v\": \"ACDCCAAJSONAACD.\",\n  \"t\": \"att\", \n  \"d\":  \"EBWNHdSXCJnFJL5OuQPyM5K0neuniccMBdXt3gIXOf2B\",\n  \"a\": \n  {\n    \"d\": \"EFrn9y2PYgveY4-9XgOcLxUderzwLIr9Bf7V_NHwY1lk\",\n    \"i\": \"EKAn2EDIPmkPreYApZfFk66jpf3uFv7vklXKhzBrAqjs\",\n    \"temp\": 45,\n    \"lat\": \"N40.3433\",\n    \"lon\": \"W111.7208\"\n  }\n}",
            "data": {
                "v": "ACDCCAAJSONAACD.",
                "t": "att",
                "d": "EBWNHdSXCJnFJL5OuQPyM5K0neuniccMBdXt3gIXOf2B",
                "a": {
                    "d": "EFrn9y2PYgveY4-9XgOcLxUderzwLIr9Bf7V_NHwY1lk",
                    "i": "EKAn2EDIPmkPreYApZfFk66jpf3uFv7vklXKhzBrAqjs",
                    "temp": 45,
                    "lat": "N40.3433",
                    "lon": "W111.7208"
                }
            },
            "basic_said": "EKSPOrRPpA-updlTW2cL-oWMB5E0haGqB1zDNkmXkjni",
            "compact_said": "EA3Ulys1LaznYFGG7thL0LIWiddjWIwsVAh57TElpBQu",
            "full": {
                "v": "ACDCCAAJSONAADu.",
                "t": "att",
                "d": "EA3Ulys1LaznYFGG7thL0LIWiddjWIwsVAh57TElpBQu",
                "a": {
                    "d": "EPp_qPhDsUJhTNAgfEnpvmqvYrMBws5nbXeXcJdWzqBV",
                    "i": "EKAn2EDIPmkPreYApZfFk66jpf3uFv7vklXKhzBrAqjs",
                    "temp": 45,
                    "lat": "N40.3433",
                    "lon": "W111.7208"
                }
            },
            "full_path": []
        },
        "61": {
            "type": "json",
            "content": "{\n  \"v\": \"ACDCCAAJSONAACD.\",\n  \"t\": \"agg\", \n  \"d\":  \"EBWNHdSXCJnFJL5OuQPyM5K0neuniccMBdXt3gIXOf2B\",\n  \"A\":\n  [\n    {\n      \"d\": \"ErzwLIr9Bf7V_NHwY1lkFrn9y2PYgveY4-9XgOcLxUde\",\n      \"u\": \"0AqHcgNghkDaG7OY1wjaDAE0\",\n      \"i\": \"did:keri:EpZfFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPmkPreYA\"\n    },\n    {\n      \"d\": \"ELIr9Bf7V_NHwY1lkgveY4-Frn9y2PY9XgOcLxUderzw\",\n      \"u\": \"0AG7OY1wjaDAE0qHcgNghkDa\",\n      \"score\": 96\n    },\n    {\n      \"d\": \"E9XgOcLxUderzwLIr9Bf7V_NHwY1lkFrn9y2PYgveY4-\",\n      \"u\": \"0AghkDaG7OY1wjaDAE0qHcgN\",\n      \"name\": \"Jane Doe\"\n    }\n  ]\n}",
            "data": {
                "v": "ACDCCAAJSONAACD.",
                "t": "agg",
                "d": "EBWNHdSXCJnFJL5OuQPyM5K0neuniccMBdXt3gIXOf2B",
                "A": [
                    {
                        "d": "ErzwLIr9Bf7V_NHwY1lkFrn9y2PYgveY4-9XgOcLxUde",
                        "u": "0AqHcgNghkDaG7OY1wjaDAE0",
                        "i": "did:keri:EpZfFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPmkPreYA"
                    },
                    {
                        "d": "ELIr9Bf7V_NHwY1lkgveY4-Frn9y2PY9XgOcLxUderzw",
                        "u": "0AG7OY1wjaDAE0qHcgNghkDa",
                        "score": 96
                    },
                    {
                        "d": "E9XgOcLxUderzwLIr9Bf7V_NHwY1lkFrn9y2PYgveY4-",
                        "u": "0AghkDaG7OY1wjaDAE0qHcgN",
                        "name": "Jane Doe"
                    }
                ]
            },
            "basic_said": "EFTwDOu2oNYZ3pKsm0TAKjX59szUCQ8oroMxmoKp9JFP",
            "compact_said": "EM0pGimfAMSLdo6ti5UUmJnGDTrO5H3s35QufD-s3AxW",
            "full": {
                "v": "ACDCCAAJSONAADo.",
                "t": "agg",
                "d": "EM0pGimfAMSLdo6ti5UUmJnGDTrO5H3s35QufD-s3AxW",
                "A": [
                    "EC9mAmY9RI140l3CX_6EK6aDl5lXns6TM65Ho00pM4nm",
                    "EKS-7gXcmN5saAl6qYw1eZvfzEJnKEgbI89RLYLtMxsr",
                    "EALtrm1Lhoa4PJcpmvwxpXzrE04GGRxsXWlK8EVTs3jF"
                ]
            },
            "full_path": []
        },
        "62": {
            "type": "json",
            "content": "{\n  \"v\": \"ACDCCAAJSONAACD.\",\n  \"t\": \"edg\", \n  \"d\":  \"EBWNHdSXCJnFJL5OuQPyM5K0neuniccMBdXt3gIXOf2B\",\n  \"e\": \n  {\n    \"d\": \"ECdoFOLe71iheqcywJcnjtJtQIYPvAu6DZIl3MOARH3d\",\n    \"poe\": \"ECJnFJL5OuQPyM5K0neuniccMBdXt3gIXOf2BBWNHdSX\",\n    \"poa\":\n    {\n      \"o\": \"OR\",\n      \"sewer\": \"EK0neuniccMBdXt3gIXOf2BBWNHdSXCJnFJL5OuQPyM5\",\n      \"gas\": \"EBWNHdSXCJnFJL5OuQPyM5K0neuniccMBdXt3gIXOf2B\"\n    }\n  }\n}",
            "data": {
                "v": "ACDCCAAJSONAACD.",
                "t": "edg",
                "d": "EBWNHdSXCJnFJL5OuQPyM5K0neuniccMBdXt3gIXOf2B",
                "e": {
                    "d": "ECdoFOLe71iheqcywJcnjtJtQIYPvAu6DZIl3MOARH3d",
                    "poe": "ECJnFJL5OuQPyM5K0neuniccMBdXt3gIXOf2BBWNHdSX",
                    "poa": {
                        "o": "OR",
                        "sewer": "EK0neuniccMBdXt3gIXOf2BBWNHdSXCJnFJL5OuQPyM5",
                        "gas": "EBWNHdSXCJnFJL5OuQPyM5K0neuniccMBdXt3gIXOf2B"
                    }
                }
            },
            "basic_said": "EC6mMBSD4luH_ETNYcKd_VKlXaUR4bvdXVU9JA6fFLQI",
            "compact_said": "ENfvcgKEABi6bQqUvWIss0Tz4ovK_eWbMDtig_l8r4R9",
            "full": {
                "v": "ACDCCAAJSONAAFA.",
                "t": "edg",
                "d": "ENfvcgKEABi6bQqUvWIss0Tz4ovK_eWbMDtig_l8r4R9",
                "e": {
                    "d": "EJB1m8ur8RzcgaP9EGyW3aPPXjR5ybmB00D-4t70cGEh",
                    "poe": "ECJnFJL5OuQPyM5K0neuniccMBdXt3gIXOf2BBWNHdSX",
                    "poa": {
                        "o": "OR",
                        "sewer": "EK0neuniccMBdXt3gIXOf2BBWNHdSXCJnFJL5OuQPyM5",
                        "gas": "EBWNHdSXCJnFJL5OuQPyM5K0neuniccMBdXt3gIXOf2B"
                    }
                }
            },
            "full_path": []
        },
        "63": {
            "type": "json",
            "content": "{\n  \"v\": \"ACDCCAAJSONAACD.\",\n  \"t\": \"rul\", \n  \"d\":  \"EBWNHdSXCJnFJL5OuQPyM5K0neuniccMBdXt3gIXOf2B\",\n  \"r\": \n  {\n    \"d\": \"EH3dCdoFOLBe71iheqcywJcnjtJtQIYPvAu6DZIl3MOR\",\n    \"disclaimers\":\n    {\n      \"l\": \"The person or legal entity identified by this ACDC's Issuer AID (Issuer) makes the following disclaimers:\",\n      \"warrantyDisclaimer\": \"Issuer provides this ACDC on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE\",\n      \"liabilityDisclaimer\": \"In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall the Issuer be liable for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this credential. \"\n    },\n    \"permittedUse\": \"The person or legal entity identified by the ACDC's Issuee AID (Issuee) agrees to only use the information contained in this ACDC for non-commercial purposes.\"\n  }\n}",
            "data": {
                "v": "ACDCCAAJSONAACD.",
                "t": "rul",
                "d": "EBWNHdSXCJnFJL5OuQPyM5K0neuniccMBdXt3gIXOf2B",
                "r": {
                    "d": "EH3dCdoFOLBe71iheqcywJcnjtJtQIYPvAu6DZIl3MOR",
                    "disclaimers": {
                        "l": "The person or legal entity identified by this ACDC's Issuer AID (Issuer) makes the following disclaimers:",
                        "warrantyDisclaimer": "Issuer provides this ACDC on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE",
                        "liabilityDisclaimer": "In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall the Issuer be liable for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this credential. "
                    },
                    "permittedUse": "The person or legal entity identified by the ACDC's Issuee AID (Issuee) agrees to only use the information contained in this ACDC for non-commercial purposes."
                }
            },
            "basic_said": "EJ8WVAEWDgUqY8_GaJVmPjI86qjQ_9J7cUCezP_tDT7d",
            "compact_said": "EMTDLf15cXSxvrvpz_VtkffIQ-EWa3hg0zpE0AS-OWLm",
            "full": {
                "v": "ACDCCAAJSONAAR2.",
                "t": "rul",
                "d": "EMTDLf15cXSxvrvpz_VtkffIQ-EWa3hg0zpE0AS-OWLm",
                "r": {
                    "d": "EIn6r4xtGs_n9NV9tcP093QFDhcVMdKVOk56tzzG4QOD",
                    "disclaimers": {
                        "l": "The person or legal entity identified by this ACDC's Issuer AID (Issuer) makes the following disclaimers:",
                        "warrantyDisclaimer": "Issuer provides this ACDC on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE",
                        "liabilityDisclaimer": "In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall the Issuer be liable for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this credential. "
                    },
                    "permittedUse": "The person or legal entity identified by the ACDC's Issuee AID (Issuee) agrees to only use the information contained in this ACDC for non-commercial purposes."
                }
            },
            "full_path": []
        },
        "64": {
            "type": "json",
            "content": "{\n  \"v\":  \"ACDC10JSON00011c_\",\n  \"d\":  \"EBdXt3gIXOf2BBWNHdSXCJnFJL5OuQPyM5K0neuniccM\",\n  \"i\":  \"did:keri:EmkPreYpZfFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPM\",\n  \"rd\": \"EMwsxUelUauaXtMxTfPAMPAI6FkekwlOjkggtymRy7x\",\n  \"s\":  \"E46jrVPTzlSkUPqGGeIZ8a8FWS7a6s4reAXRZOkogZ2A\",\n  \"a\":  \"EgveY4-9XgOcLxUderzwLIr9Bf7V_NHwY1lkFrn9y2PY\",\n  \"e\":  \"ERH3dCdoFOLe71iheqcywJcnjtJtQIYPvAu6DZIl3MOA\",\n  \"r\":  \"Ee71iheqcywJcnjtJtQIYPvAu6DZIl3MORH3dCdoFOLB\"\n}",
            "data": {
                "v": "ACDC10JSON00011c_",
                "d": "EBdXt3gIXOf2BBWNHdSXCJnFJL5OuQPyM5K0neuniccM",
                "i": "did:keri:EmkPreYpZfFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPM",
                "rd": "EMwsxUelUauaXtMxTfPAMPAI6FkekwlOjkggtymRy7x",
                "s": "E46jrVPTzlSkUPqGGeIZ8a8FWS7a6s4reAXRZOkogZ2A",
                "a": "EgveY4-9XgOcLxUderzwLIr9Bf7V_NHwY1lkFrn9y2PY",
                "e": "ERH3dCdoFOLe71iheqcywJcnjtJtQIYPvAu6DZIl3MOA",
                "r": "Ee71iheqcywJcnjtJtQIYPvAu6DZIl3MORH3dCdoFOLB"
            },
            "basic_said": "EFopDn3D2PYE5Ia_LMeI535BtRu1Ud5Eq_3uHclGv_b-",
            "compact_said": "EFopDn3D2PYE5Ia_LMeI535BtRu1Ud5Eq_3uHclGv_b-"
        },
        "65": {
            "type": "json",
            "content": "{\n  \"v\":  \"ACDC10JSON00011c_\",\n  \"d\":  \"EBdXt3gIXOf2BBWNHdSXCJnFJL5OuQPyM5K0neuniccM\",\n  \"i\":  \"did:keri:EmkPreYpZfFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPM\",\n  \"rd\": \"EMwsxUelUauaXtMxTfPAMPAI6FkekwlOjkggtymRy7x\",\n  \"s\":  \"E46jrVPTzlSkUPqGGeIZ8a8FWS7a6s4reAXRZOkogZ2A\",\n  \"a\":\n  {\n    \"d\": \"EgveY4-9XgOcLxUderzwLIr9Bf7V_NHwY1lkFrn9y2PY\",\n    \"i\": \"did:keri:EpZfFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPmkPreYA\",\n    \"score\": 96,\n    \"name\": \"Jane Doe\"\n  },\n  \"e\":\n  {\n    \"d\": \"EerzwLIr9Bf7V_NHwY1lkFrn9y2PgveY4-9XgOcLxUdY\",\n    \"boss\":\n    {\n      \"d\": \"E9y2PgveY4-9XgOcLxUdYerzwLIr9Bf7V_NHwY1lkFrn\",\n      \"n\": \"EIl3MORH3dCdoFOLe71iheqcywJcnjtJtQIYPvAu6DZA\",\n      \"s\": \"EiheqcywJcnjtJtQIYPvAu6DZAIl3MORH3dCdoFOLe71\",\n      \"w\": \"high\"\n    }\n  },\n  \"r\":\n  {\n    \"d\": \"EwY1lkFrn9y2PgveY4-9XgOcLxUdYerzwLIr9Bf7V_NA\",\n    \"warrantyDisclaimer\":\n    {\n      \"d\": \"EXgOcLxUdYerzwLIr9Bf7V_NAwY1lkFrn9y2PgveY4-9\",\n      \"l\": \"Issuer provides this credential on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE\"\n    },\n    \"liabilityDisclaimer\":\n    {\n      \"d\": \"EY1lkFrn9y2PgveY4-9XgOcLxUdYerzwLIr9Bf7V_NAw\",\n      \"l\": \"In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall the Issuer be liable for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this credential. \"\n    }\n  }\n}",
            "data": {
                "v": "ACDC10JSON00011c_",
                "d": "EBdXt3gIXOf2BBWNHdSXCJnFJL5OuQPyM5K0neuniccM",
                "i": "did:keri:EmkPreYpZfFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPM",
                "rd": "EMwsxUelUauaXtMxTfPAMPAI6FkekwlOjkggtymRy7x",
                "s": "E46jrVPTzlSkUPqGGeIZ8a8FWS7a6s4reAXRZOkogZ2A",
                "a": {
                    "d": "EgveY4-9XgOcLxUderzwLIr9Bf7V_NHwY1lkFrn9y2PY",
                    "i": "did:keri:EpZfFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPmkPreYA",
                    "score": 96,
                    "name": "Jane Doe"
                },
                "e": {
                    "d": "EerzwLIr9Bf7V_NHwY1lkFrn9y2PgveY4-9XgOcLxUdY",
                    "boss": {
                        "d": "E9y2PgveY4-9XgOcLxUdYerzwLIr9Bf7V_NHwY1lkFrn",
                        "n": "EIl3MORH3dCdoFOLe71iheqcywJcnjtJtQIYPvAu6DZA",
                        "s": "EiheqcywJcnjtJtQIYPvAu6DZAIl3MORH3dCdoFOLe71",
                        "w": "high"
                    }
                },
                "r": {
                    "d": "EwY1lkFrn9y2PgveY4-9XgOcLxUdYerzwLIr9Bf7V_NA",
                    "warrantyDisclaimer": {
                        "d": "EXgOcLxUdYerzwLIr9Bf7V_NAwY1lkFrn9y2PgveY4-9",
                        "l": "Issuer provides this credential on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE"
                    },
                    "liabilityDisclaimer": {
                        "d": "EY1lkFrn9y2PgveY4-9XgOcLxUdYerzwLIr9Bf7V_NAw",
                        "l": "In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall the Issuer be liable for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this credential. "
                    }
                }
            },
            "basic_said": "EJAx80yXpNugAvAtfqLbxGxTaydhWXzXvqvKstXCUtsK",
            "compact_said": "EBnN9Rqf56ObzH9tvBq_KqSfYhCMOpIzj6ECJkfiv8OR",
            "full": {
                "v": "ACDC10JSON0005cf_",
                "d": "EBnN9Rqf56ObzH9tvBq_KqSfYhCMOpIzj6ECJkfiv8OR",
                "i": "did:keri:EmkPreYpZfFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPM",
                "rd": "EMwsxUelUauaXtMxTfPAMPAI6FkekwlOjkggtymRy7x",
                "s": "E46jrVPTzlSkUPqGGeIZ8a8FWS7a6s4reAXRZOkogZ2A",
                "a": {
                    "d": "EGthorNVI6IGJLsHHPxxH2HeyGtIlTfhGBbnR2f4NnLN",
                    "i": "did:keri:EpZfFk66jpf3uFv7vklXKhzBrAqjsKAn2EDIPmkPreYA",
                    "score": 96,
                    "name": "Jane Doe"
                },
                "e": {
                    "d": "EOIUlvpUiohwnm2tlNNXSFU9jAJyeHQsZGGLG8DOkETm",
                    "boss": {
                        "d": "EH0-yFfRCINrexrKgKjrj6dUJPW4vfThysS7VF5gVBKT",
                        "n": "EIl3MORH3dCdoFOLe71iheqcywJcnjtJtQIYPvAu6DZA",
                        "s": "EiheqcywJcnjtJtQIYPvAu6DZAIl3MORH3dCdoFOLe71",
                        "w": "high"
                    }
                },
                "r": {
                    "d": "EKarNQC-K2BRLPMtaiajs4O91Ho6hLCXI00mKI33S6lb",
                    "warrantyDisclaimer": {
                        "d": "EIxzFxrwHcOjoBYUxy1zml8owgDzMSAWE3ysGV5dXZ4i",
                        "l": "Issuer provides this credential on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE"
                    },
                    "liabilityDisclaimer": {
                        "d": "EInxQaZ5QHhS9Qpz9K5CQakChHunL1D9_ueLZPvhhUXt",
                        "l": "In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall the Issuer be liable for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this credential. "
                    }
                }
            },
            "full_path": []
        },
        "66": {
            "type": "json",
            "content": "{\n  \"$id\": \"E46jrVPTzlSkUPqGGeIZ8a8FWS7a6s4reAXRZOkogZ2A\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"title\": \"Public ACDC\",\n  \"description\": \"Example JSON Schema Public ACDC.\",\n  \"credentialType\": \"PublicACDCExample\",\n  \"type\": \"object\",\n   \"required\":\n  [\n    \"v\",\n    \"d\",\n    \"i\",\n    \"rd\",\n    \"s\",\n    \"a\",\n    \"e\",\n    \"r\"\n  ],\n  \"properties\":\n  {\n    \"v\":\n    {\n      \"description\": \"ACDC version string\",\n      \"type\": \"string\"\n    },\n    \"d\":\n    {\n     \"description\": \"ACDC SAID\",\n      \"type\": \"string\"\n    },\n    \"i\":\n    {\n      \"description\": \"Issuer AID\",\n      \"type\": \"string\"\n    },\n    \"rd\":\n    {\n      \"description\": \"Registry SAID\",\n      \"type\": \"string\"\n    },\n    \"s\":\n    {\n      \"description\": \"schema section\",\n      \"oneOf\":\n      [\n        {\n          \"description\": \"schema section SAID\",\n          \"type\": \"string\"\n        },\n        {\n          \"description\": \"schema detail\",\n          \"type\": \"object\"\n        }\n      ]\n    },\n    \"a\":\n    {\n      \"description\": \"attribute section\",\n      \"oneOf\":\n      [\n        {\n          \"description\": \"attribute section SAID\",\n          \"type\": \"string\"\n        },\n        {\n          \"description\": \"attribute detail\",\n          \"type\": \"object\",\n          \"required\":\n          [\n            \"d\",\n            \"i\",\n            \"score\",\n            \"name\"\n          ],\n          \"properties\":\n          {\n            \"d\":\n            {\n              \"description\": \"attribute section SAID\",\n              \"type\": \"string\"\n            },\n            \"i\":\n            {\n              \"description\": \"Issuee AID\",\n              \"type\": \"string\"\n            },\n            \"score\":\n            {\n              \"description\": \"test score\",\n              \"type\": \"integer\"\n            },\n            \"name\":\n            {\n              \"description\": \"test taker full name\",\n              \"type\": \"string\"\n            }\n          },\n          \"additionalProperties\": false\n        }\n      ]\n    },\n    \"e\":\n    {\n      \"description\": \"edge section\",\n      \"oneOf\":\n      [\n        {\n          \"description\": \"edge section SAID\",\n          \"type\": \"string\"\n        },\n        {\n          \"description\": \"edge detail\",\n          \"type\": \"object\",\n          \"required\":\n          [\n            \"d\",\n            \"boss\"\n          ],\n          \"properties\":\n          {\n            \"d\":\n            {\n              \"description\": \"edge section SAID\",\n              \"type\": \"string\"\n            },\n            \"boss\":\n            {\n              \"description\": \"boss edge\",\n              \"type\": \"object\",\n              \"required\":\n              [\n                \"d\",\n                \"n\",\n                \"s\",\n                \"w\"\n              ],\n              \"properties\":\n              {\n                \"d\":\n                {\n                  \"description\": \"edge SAID\",\n                  \"type\": \"string\"\n                },\n                \"n\":\n                {\n                  \"description\": \"far node SAID\",\n                  \"type\": \"string\"\n                },\n                \"s\":\n                {\n                  \"description\": \"far node schema SAID\",\n                  \"type\": \"string\",\n                  \"const\": \"EiheqcywJcnjtJtQIYPvAu6DZAIl3MORH3dCdoFOLe71\"\n                },\n                \"w\":\n                {\n                  \"description\": \"edge weight\",\n                  \"type\": \"string\"\n                }\n              },\n              \"additionalProperties\": false\n            }\n          },\n          \"additionalProperties\": false\n        }\n      ]\n    },\n    \"r\":\n    {\n      \"description\": \"rule section\",\n      \"oneOf\":\n      [\n        {\n          \"description\": \"rule section SAID\",\n          \"type\": \"string\"\n        },\n        {\n          \"description\": \"rule detail\",\n          \"type\": \"object\",\n          \"required\":\n          [\n            \"d\",\n            \"warrantyDisclaimer\",\n            \"liabilityDisclaimer\"\n          ],\n          \"properties\":\n          {\n            \"d\":\n            {\n              \"description\": \"edge section SAID\",\n              \"type\": \"string\"\n            },\n            \"warrantyDisclaimer\":\n            {\n              \"description\": \"warranty disclaimer clause\",\n              \"type\": \"object\",\n              \"required\":\n              [\n                \"d\",\n                \"l\"\n              ],\n              \"properties\":\n              {\n                \"d\":\n                {\n                  \"description\": \"clause SAID\",\n                  \"type\": \"string\"\n                },\n                \"l\":\n                {\n                  \"description\": \"legal language\",\n                  \"type\": \"string\"\n                }\n              },\n              \"additionalProperties\": false\n            },\n            \"liabilityDisclaimer\":\n            {\n              \"description\": \"liability disclaimer clause\",\n              \"type\": \"object\",\n              \"required\":\n              [\n                \"d\",\n                \"l\"\n              ],\n              \"properties\":\n              {\n                \"d\":\n                {\n                  \"description\": \"clause SAID\",\n                  \"type\": \"string\"\n                },\n                \"l\":\n                {\n                  \"description\": \"legal language\",\n                  \"type\": \"string\"\n                }\n              },\n              \"additionalProperties\": false\n            }\n          },\n          \"additionalProperties\": false\n        }\n      ]\n    }\n  },\n  \"additionalProperties\": false\n}",
            "data": {
                "$id": "E46jrVPTzlSkUPqGGeIZ8a8FWS7a6s4reAXRZOkogZ2A",
                "$schema": "https://json-schema.org/draft/2020-12/schema",
                "title": "Public ACDC",
                "description": "Example JSON Schema Public ACDC.",
                "credentialType": "PublicACDCExample",
                "type": "object",
                "required": [
                    "v",
                    "d",
                    "i",
                    "rd",
                    "s",
                    "a",
                    "e",
                    "r"
                ],
                "properties": {
                    "v": {
                        "description": "ACDC version string",
                        "type": "string"
                    },
                    "d": {
                        "description": "ACDC SAID",
                        "type": "string"
                    },
                    "i": {
                        "description": "Issuer AID",
                        "type": "string"
                    },
                    "rd": {
                        "description": "Registry SAID",
                        "type": "string"
                    },
                    "s": {
                        "description": "schema section",
                        "oneOf": [
                            {
                                "description": "schema section SAID",
                                "type": "string"
                            },
                            {
                                "description": "schema detail",
                                "type": "object"
                            }
                        ]
                    },
                    "a": {
                        "description": "attribute section",
                        "oneOf": [
                            {
                                "description": "attribute section SAID",
                                "type": "string"
                            },
                            {
                                "description": "attribute detail",
                                "type": "object",
                                "required": [
                                    "d",
                                    "i",
                                    "score",
                                    "name"
                                ],
                                "properties": {
                                    "d": {
                                        "description": "attribute section SAID",
                                        "type": "string"
                                    },
                                    "i": {
                                        "description": "Issuee AID",
                                        "type": "string"
                                    },
                                    "score": {
                                        "description": "test score",
                                        "type": "integer"
                                    },
                                    "name": {
                                        "description": "test taker full name",
                                        "type": "string"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    },
                    "e": {
                        "description": "edge section",
                        "oneOf": [
                            {
                                "description": "edge section SAID",
                                "type": "string"
                            },
                            {
                                "description": "edge detail",
                                "type": "object",
                                "required": [
                                    "d",
                                    "boss"
                                ],
                                "properties": {
                                    "d": {
                                        "description": "edge section SAID",
                                        "type": "string"
                                    },
                                    "boss": {
                                        "description": "boss edge",
                                        "type": "object",
                                        "required": [
                                            "d",
                                            "n",
                                            "s",
                                            "w"
                                        ],
                                        "properties": {
                                            "d": {
                                                "description": "edge SAID",
                                                "type": "string"
                                            },
                                            "n": {
                                                "description": "far node SAID",
                                                "type": "string"
                                            },
                                            "s": {
                                                "description": "far node schema SAID",
                                                "type": "string",
                                                "const": "EiheqcywJcnjtJtQIYPvAu6DZAIl3MORH3dCdoFOLe71"
                                            },
                                            "w": {
                                                "description": "edge weight",
                                                "type": "string"
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    },
                    "r": {
                        "description": "rule section",
                        "oneOf": [
                            {
                                "description": "rule section SAID",
                                "type": "string"
                            },
                            {
                                "description": "rule detail",
                                "type": "object",
                                "required": [
                                    "d",
                                    "warrantyDisclaimer",
                                    "liabilityDisclaimer"
                                ],
                                "properties": {
                                    "d": {
                                        "description": "edge section SAID",
                                        "type": "string"
                                    },
                                    "warrantyDisclaimer": {
                                        "description": "warranty disclaimer clause",
                                        "type": "object",
                                        "required": [
                                            "d",
                                            "l"
                                        ],
                                        "properties": {
                                            "d": {
                                                "description": "clause SAID",
                                                "type": "string"
                                            },
                                            "l": {
                                                "description": "legal language",
                                                "type": "string"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "liabilityDisclaimer": {
                                        "description": "liability disclaimer clause",
                                        "type": "object",
                                        "required": [
                                            "d",
                                            "l"
                                        ],
                                        "properties": {
                                            "d": {
                                                "description": "clause SAID",
                                                "type": "string"
                                            },
                                            "l": {
                                                "description": "legal language",
                                                "type": "string"
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                },
                "additionalProperties": false
            },
            "basic_said": "EHxRqAMM8RJOR__8FA5oul2K7ax6UAvJzpKkxRJbYDzj",
            "compact_said": "EHxRqAMM8RJOR__8FA5oul2K7ax6UAvJzpKkxRJbYDzj",
            "full": {
                "$id": "EHxRqAMM8RJOR__8FA5oul2K7ax6UAvJzpKkxRJbYDzj",
                "$schema": "https://json-schema.org/draft/2020-12/schema",
                "title": "Public ACDC",
                "description": "Example JSON Schema Public ACDC.",
                "credentialType": "PublicACDCExample",
                "type": "object",
                "required": [
                    "v",
                    "d",
                    "i",
                    "rd",
                    "s",
                    "a",
                    "e",
                    "r"
                ],
                "properties": {
                    "v": {
                        "description": "ACDC version string",
                        "type": "string"
                    },
                    "d": {
                        "description": "ACDC SAID",
                        "type": "string"
                    },
                    "i": {
                        "description": "Issuer AID",
                        "type": "string"
                    },
                    "rd": {
                        "description": "Registry SAID",
                        "type": "string"
                    },
                    "s": {
                        "description": "schema section",
                        "oneOf": [
                            {
                                "description": "schema section SAID",
                                "type": "string"
                            },
                            {
                                "description": "schema detail",
                                "type": "object"
                            }
                        ]
                    },
                    "a": {
                        "description": "attribute section",
                        "oneOf": [
                            {
                                "description": "attribute section SAID",
                                "type": "string"
                            },
                            {
                                "description": "attribute detail",
                                "type": "object",
                                "required": [
                                    "d",
                                    "i",
                                    "score",
                                    "name"
                                ],
                                "properties": {
                                    "d": {
                                        "description": "attribute section SAID",
                                        "type": "string"
                                    },
                                    "i": {
                                        "description": "Issuee AID",
                                        "type": "string"
                                    },
                                    "score": {
                                        "description": "test score",
                                        "type": "integer"
                                    },
                                    "name": {
                                        "description": "test taker full name",
                                        "type": "string"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    },
                    "e": {
                        "description": "edge section",
                        "oneOf": [
                            {
                                "description": "edge section SAID",
                                "type": "string"
                            },
                            {
                                "description": "edge detail",
                                "type": "object",
                                "required": [
                                    "d",
                                    "boss"
                                ],
                                "properties": {
                                    "d": {
                                        "description": "edge section SAID",
                                        "type": "string"
                                    },
                                    "boss": {
                                        "description": "boss edge",
                                        "type": "object",
                                        "required": [
                                            "d",
                                            "n",
                                            "s",
                                            "w"
                                        ],
                                        "properties": {
                                            "d": {
                                                "description": "edge SAID",
                                                "type": "string"
                                            },
                                            "n": {
                                                "description": "far node SAID",
                                                "type": "string"
                                            },
                                            "s": {
                                                "description": "far node schema SAID",
                                                "type": "string",
                                                "const": "EiheqcywJcnjtJtQIYPvAu6DZAIl3MORH3dCdoFOLe71"
                                            },
                                            "w": {
                                                "description": "edge weight",
                                                "type": "string"
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    },
                    "r": {
                        "description": "rule section",
                        "oneOf": [
                            {
                                "description": "rule section SAID",
                                "type": "string"
                            },
                            {
                                "description": "rule detail",
                                "type": "object",
                                "required": [
                                    "d",
                                    "warrantyDisclaimer",
                                    "liabilityDisclaimer"
                                ],
                                "properties": {
                                    "d": {
                                        "description": "edge section SAID",
                                        "type": "string"
                                    },
                                    "warrantyDisclaimer": {
                                        "description": "warranty disclaimer clause",
                                        "type": "object",
                                        "required": [
                                            "d",
                                            "l"
                                        ],
                                        "properties": {
                                            "d": {
                                                "description": "clause SAID",
                                                "type": "string"
                                            },
                                            "l": {
                                                "description": "legal language",
                                                "type": "string"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "liabilityDisclaimer": {
                                        "description": "liability disclaimer clause",
                                        "type": "object",
                                        "required": [
                                            "d",
                                            "l"
                                        ],
                                        "properties": {
                                            "d": {
                                                "description": "clause SAID",
                                                "type": "string"
                                            },
                                            "l": {
                                                "description": "legal language",
                                                "type": "string"
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                },
                "additionalProperties": false
            }
        }
    },
    "meta": {
        "d": "EHeAeasf2qUOndAkaOX0mPtOKqeUDAAZujTI8xglQgtK",
        "run_time": 1733713517,
        "file_sha256": "b92b7f61c4bbcc25d463aeaa3e4f2c7f34e1e156a5f23f9599f5ca0721715e5b",
        "base_name": "spec.md",
        "extension": ".md",
        "creation_time": "2024-12-08 16:21:29",
        "modified_time": "2024-12-08 16:21:29",
        "raw_b64": ""
    }
}